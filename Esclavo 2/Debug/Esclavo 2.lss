
Esclavo 2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000043e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003ca  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  0000043e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000043e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000470  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  000004b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b8f  00000000  00000000  00000558  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008fd  00000000  00000000  000010e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000689  00000000  00000000  000019e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000144  00000000  00000000  00002070  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004cd  00000000  00000000  000021b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000020e  00000000  00000000  00002681  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  0000288f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  1c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  28:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  2c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  30:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  48:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__vector_18>
  4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  54:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  58:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  5c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  60:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__vector_24>
  64:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  68:	7e 00       	.word	0x007e	; ????
  6a:	91 00       	.word	0x0091	; ????
  6c:	a4 00       	.word	0x00a4	; ????
  6e:	b7 00       	.word	0x00b7	; ????
  70:	ca 00       	.word	0x00ca	; ????
  72:	cf 00       	.word	0x00cf	; ????
  74:	d4 00       	.word	0x00d4	; ????
  76:	d9 00       	.word	0x00d9	; ????
  78:	de 00       	.word	0x00de	; ????
  7a:	e3 00       	.word	0x00e3	; ????

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_clear_bss>:
  88:	21 e0       	ldi	r18, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	01 c0       	rjmp	.+2      	; 0x92 <.do_clear_bss_start>

00000090 <.do_clear_bss_loop>:
  90:	1d 92       	st	X+, r1

00000092 <.do_clear_bss_start>:
  92:	a2 30       	cpi	r26, 0x02	; 2
  94:	b2 07       	cpc	r27, r18
  96:	e1 f7       	brne	.-8      	; 0x90 <.do_clear_bss_loop>
  98:	0e 94 6e 00 	call	0xdc	; 0xdc <main>
  9c:	0c 94 e3 01 	jmp	0x3c6	; 0x3c6 <_exit>

000000a0 <__bad_interrupt>:
  a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <I2C_Config_SLAVE>:
#include "I2C.h"

uint8_t esclavo, dato, aux;

void I2C_Config_SLAVE(uint8_t address){
	DDRC &= ~((1<<DDC4) | (1<<DDC5));
  a4:	97 b1       	in	r25, 0x07	; 7
  a6:	9f 7c       	andi	r25, 0xCF	; 207
  a8:	97 b9       	out	0x07, r25	; 7
	
	address <<= 1;  //Ubica la dirección 
  aa:	88 0f       	add	r24, r24
	address |= 0x01; //habilita para reconocer las llamadas generales de I2C
  ac:	81 60       	ori	r24, 0x01	; 1
	TWAR = address;
  ae:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7f80ba>
	
	TWCR = (1 << TWEA) | (1 << TWEN) | (1 << TWIE); //Habilita el BUS, con reconocimiento e interrupción
  b2:	85 e4       	ldi	r24, 0x45	; 69
  b4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  b8:	08 95       	ret

000000ba <PINES>:
	DDRC =0;  //Puerto C como entrada
	initUART9600();  //Iniciar UART
	
	I2C_Config_SLAVE(ESCLAVO2);
	
	sei();   //Activar interrupciones
  ba:	84 b1       	in	r24, 0x04	; 4
  bc:	8f 60       	ori	r24, 0x0F	; 15
  be:	84 b9       	out	0x04, r24	; 4
  c0:	8a b1       	in	r24, 0x0a	; 10
  c2:	80 6c       	ori	r24, 0xC0	; 192
  c4:	8a b9       	out	0x0a, r24	; 10
  c6:	08 95       	ret

000000c8 <setup>:
  c8:	f8 94       	cli
  ca:	0e 94 5d 00 	call	0xba	; 0xba <PINES>
  ce:	0e 94 56 01 	call	0x2ac	; 0x2ac <initUART9600>
  d2:	82 e0       	ldi	r24, 0x02	; 2
  d4:	0e 94 52 00 	call	0xa4	; 0xa4 <I2C_Config_SLAVE>
  d8:	78 94       	sei
  da:	08 95       	ret

000000dc <main>:
//Programa Principal
////////////////////////////////////////////

int main(void)
{
	setup();// Sub_Rutinas
  dc:	0e 94 64 00 	call	0xc8	; 0xc8 <setup>
		
		
		//CONTROL DE MOTORES
		//dato Instruccion de motor.
		// dato = 1 (Adelante), 2(Atras), 3(Derecha), 4(Izquierda). PORTB &= ~(1 << PB0);
		switch(dato) {
  e0:	e0 91 01 01 	lds	r30, 0x0101	; 0x800101 <dato>
  e4:	8e 2f       	mov	r24, r30
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	fc 01       	movw	r30, r24
  ea:	31 97       	sbiw	r30, 0x01	; 1
  ec:	ea 30       	cpi	r30, 0x0A	; 10
  ee:	f1 05       	cpc	r31, r1
  f0:	08 f0       	brcs	.+2      	; 0xf4 <main+0x18>
  f2:	6e c0       	rjmp	.+220    	; 0x1d0 <main+0xf4>
  f4:	ec 5c       	subi	r30, 0xCC	; 204
  f6:	ff 4f       	sbci	r31, 0xFF	; 255
  f8:	0c 94 9d 01 	jmp	0x33a	; 0x33a <__tablejump2__>
			case 1:
			//Adelante
			PORTD |= (1 << PD7);//A
  fc:	8b b1       	in	r24, 0x0b	; 11
  fe:	80 68       	ori	r24, 0x80	; 128
 100:	8b b9       	out	0x0b, r24	; 11
			PORTB &= ~(1 << PB0);//N1
 102:	85 b1       	in	r24, 0x05	; 5
 104:	8e 7f       	andi	r24, 0xFE	; 254
 106:	85 b9       	out	0x05, r24	; 5
			PORTB |= (1 << PB1);//N2
 108:	85 b1       	in	r24, 0x05	; 5
 10a:	82 60       	ori	r24, 0x02	; 2
 10c:	85 b9       	out	0x05, r24	; 5
			
			
			PORTD |= (1 << PD6);
 10e:	8b b1       	in	r24, 0x0b	; 11
 110:	80 64       	ori	r24, 0x40	; 64
 112:	8b b9       	out	0x0b, r24	; 11
			PORTB &= ~(1 << PB2);//N3
 114:	85 b1       	in	r24, 0x05	; 5
 116:	8b 7f       	andi	r24, 0xFB	; 251
 118:	85 b9       	out	0x05, r24	; 5
			PORTB |= (1 << PB3);//N4
 11a:	85 b1       	in	r24, 0x05	; 5
 11c:	88 60       	ori	r24, 0x08	; 8
 11e:	85 b9       	out	0x05, r24	; 5
			break;
 120:	5d c0       	rjmp	.+186    	; 0x1dc <main+0x100>
			
			case 2:
			//Atras
			PORTD |= (1 << PD7);//A
 122:	8b b1       	in	r24, 0x0b	; 11
 124:	80 68       	ori	r24, 0x80	; 128
 126:	8b b9       	out	0x0b, r24	; 11
			PORTB |= (1 << PB0);//N1
 128:	85 b1       	in	r24, 0x05	; 5
 12a:	81 60       	ori	r24, 0x01	; 1
 12c:	85 b9       	out	0x05, r24	; 5
			PORTB &= ~(1 << PB1);//N2
 12e:	85 b1       	in	r24, 0x05	; 5
 130:	8d 7f       	andi	r24, 0xFD	; 253
 132:	85 b9       	out	0x05, r24	; 5
			
			
			PORTD |= (1 << PD6);//B
 134:	8b b1       	in	r24, 0x0b	; 11
 136:	80 64       	ori	r24, 0x40	; 64
 138:	8b b9       	out	0x0b, r24	; 11
			PORTB |= (1 << PB2);//N3
 13a:	85 b1       	in	r24, 0x05	; 5
 13c:	84 60       	ori	r24, 0x04	; 4
 13e:	85 b9       	out	0x05, r24	; 5
			PORTB &= ~(1 << PB3);//N4
 140:	85 b1       	in	r24, 0x05	; 5
 142:	87 7f       	andi	r24, 0xF7	; 247
 144:	85 b9       	out	0x05, r24	; 5
		
			break;
 146:	4a c0       	rjmp	.+148    	; 0x1dc <main+0x100>
			
			case 3:
			//Derecha
			PORTD |= (1 << PD7);//A
 148:	8b b1       	in	r24, 0x0b	; 11
 14a:	80 68       	ori	r24, 0x80	; 128
 14c:	8b b9       	out	0x0b, r24	; 11
			PORTB &= ~(1 << PB0);//N1
 14e:	85 b1       	in	r24, 0x05	; 5
 150:	8e 7f       	andi	r24, 0xFE	; 254
 152:	85 b9       	out	0x05, r24	; 5
			PORTB |= (1 << PB1);//N2
 154:	85 b1       	in	r24, 0x05	; 5
 156:	82 60       	ori	r24, 0x02	; 2
 158:	85 b9       	out	0x05, r24	; 5
			
			PORTD |= (1 << PD6);//B
 15a:	8b b1       	in	r24, 0x0b	; 11
 15c:	80 64       	ori	r24, 0x40	; 64
 15e:	8b b9       	out	0x0b, r24	; 11
			PORTB |= (1 << PB2);//N3
 160:	85 b1       	in	r24, 0x05	; 5
 162:	84 60       	ori	r24, 0x04	; 4
 164:	85 b9       	out	0x05, r24	; 5
			PORTB &= ~(1 << PB3);//N4
 166:	85 b1       	in	r24, 0x05	; 5
 168:	87 7f       	andi	r24, 0xF7	; 247
 16a:	85 b9       	out	0x05, r24	; 5
			
			break;
 16c:	37 c0       	rjmp	.+110    	; 0x1dc <main+0x100>
			
			case 4:
			//Izquierda
			PORTD |= (1 << PD7);//A
 16e:	8b b1       	in	r24, 0x0b	; 11
 170:	80 68       	ori	r24, 0x80	; 128
 172:	8b b9       	out	0x0b, r24	; 11
			PORTB |= (1 << PB0);//N1
 174:	85 b1       	in	r24, 0x05	; 5
 176:	81 60       	ori	r24, 0x01	; 1
 178:	85 b9       	out	0x05, r24	; 5
			PORTB &= ~(1 << PB1);//N2
 17a:	85 b1       	in	r24, 0x05	; 5
 17c:	8d 7f       	andi	r24, 0xFD	; 253
 17e:	85 b9       	out	0x05, r24	; 5
			
			PORTD |= (1 << PD6);//B
 180:	8b b1       	in	r24, 0x0b	; 11
 182:	80 64       	ori	r24, 0x40	; 64
 184:	8b b9       	out	0x0b, r24	; 11
			PORTB &= ~(1 << PB2);//N3
 186:	85 b1       	in	r24, 0x05	; 5
 188:	8b 7f       	andi	r24, 0xFB	; 251
 18a:	85 b9       	out	0x05, r24	; 5
			PORTB |= (1 << PB3);//N4
 18c:	85 b1       	in	r24, 0x05	; 5
 18e:	88 60       	ori	r24, 0x08	; 8
 190:	85 b9       	out	0x05, r24	; 5
			
			break;
 192:	24 c0       	rjmp	.+72     	; 0x1dc <main+0x100>
			
			case 5:
			UART_PrintNum(1);  //Sistema esta apagado
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	0e 94 82 01 	call	0x304	; 0x304 <UART_PrintNum>
			break;
 19c:	1f c0       	rjmp	.+62     	; 0x1dc <main+0x100>
			
			case 6:
			UART_PrintNum(5);   //Se detecto caja grande
 19e:	85 e0       	ldi	r24, 0x05	; 5
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	0e 94 82 01 	call	0x304	; 0x304 <UART_PrintNum>
			break;
 1a6:	1a c0       	rjmp	.+52     	; 0x1dc <main+0x100>
			
			case 7:
			UART_PrintNum(2);    //Se detecto caja pequeña
 1a8:	82 e0       	ldi	r24, 0x02	; 2
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	0e 94 82 01 	call	0x304	; 0x304 <UART_PrintNum>
			break;
 1b0:	15 c0       	rjmp	.+42     	; 0x1dc <main+0x100>
			
			case 8:
			UART_PrintNum(7);    //Se detecto gas
 1b2:	87 e0       	ldi	r24, 0x07	; 7
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	0e 94 82 01 	call	0x304	; 0x304 <UART_PrintNum>
			break;
 1ba:	10 c0       	rjmp	.+32     	; 0x1dc <main+0x100>
			
			case 9:
			UART_PrintNum(6);    //Se detecto gas
 1bc:	86 e0       	ldi	r24, 0x06	; 6
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	0e 94 82 01 	call	0x304	; 0x304 <UART_PrintNum>
			break;
 1c4:	0b c0       	rjmp	.+22     	; 0x1dc <main+0x100>
			
			case 10:
			UART_PrintNum(8);    //Se inicio el sistema
 1c6:	88 e0       	ldi	r24, 0x08	; 8
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	0e 94 82 01 	call	0x304	; 0x304 <UART_PrintNum>
			break;
 1ce:	06 c0       	rjmp	.+12     	; 0x1dc <main+0x100>
			
			
			default:
			// Motores apagados default
			PORTD &= ~(1 << PD7);//A
 1d0:	8b b1       	in	r24, 0x0b	; 11
 1d2:	8f 77       	andi	r24, 0x7F	; 127
 1d4:	8b b9       	out	0x0b, r24	; 11
			PORTD &= ~(1 << PD6);//B
 1d6:	8b b1       	in	r24, 0x0b	; 11
 1d8:	8f 7b       	andi	r24, 0xBF	; 191
 1da:	8b b9       	out	0x0b, r24	; 11
			break;
		}
		dato=0;
 1dc:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <dato>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1e0:	2f ef       	ldi	r18, 0xFF	; 255
 1e2:	83 ef       	ldi	r24, 0xF3	; 243
 1e4:	91 e0       	ldi	r25, 0x01	; 1
 1e6:	21 50       	subi	r18, 0x01	; 1
 1e8:	80 40       	sbci	r24, 0x00	; 0
 1ea:	90 40       	sbci	r25, 0x00	; 0
 1ec:	e1 f7       	brne	.-8      	; 0x1e6 <main+0x10a>
 1ee:	00 c0       	rjmp	.+0      	; 0x1f0 <main+0x114>
 1f0:	00 00       	nop
 1f2:	76 cf       	rjmp	.-276    	; 0xe0 <main+0x4>

000001f4 <__vector_18>:
////////////////////////////////////////////
//Vects
////////////////////////////////////////////

ISR(USART_RX_vect)
{
 1f4:	1f 92       	push	r1
 1f6:	0f 92       	push	r0
 1f8:	0f b6       	in	r0, 0x3f	; 63
 1fa:	0f 92       	push	r0
 1fc:	11 24       	eor	r1, r1
 1fe:	8f 93       	push	r24
	receivedChar = UDR0; // Almacena el caracter recibido
 200:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 204:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	
	while(!(UCSR0A & (1<<UDRE0)));    //Mientras haya caracteres
 208:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 20c:	85 ff       	sbrs	r24, 5
 20e:	fc cf       	rjmp	.-8      	; 0x208 <__vector_18+0x14>
	
}
 210:	8f 91       	pop	r24
 212:	0f 90       	pop	r0
 214:	0f be       	out	0x3f, r0	; 63
 216:	0f 90       	pop	r0
 218:	1f 90       	pop	r1
 21a:	18 95       	reti

0000021c <__vector_24>:

////////////////////////////////////////////
//I2C
////////////////////////////////////////////

ISR(TWI_vect){           //Vector de interrupcion de I2C
 21c:	1f 92       	push	r1
 21e:	0f 92       	push	r0
 220:	0f b6       	in	r0, 0x3f	; 63
 222:	0f 92       	push	r0
 224:	11 24       	eor	r1, r1
 226:	8f 93       	push	r24
 228:	ef 93       	push	r30
 22a:	ff 93       	push	r31
	uint8_t estado;
	
	estado = TWSR & 0xFC;  //Lee el estado de la interfaz
 22c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 230:	8c 7f       	andi	r24, 0xFC	; 252
	
	switch(estado){
 232:	80 39       	cpi	r24, 0x90	; 144
 234:	c9 f0       	breq	.+50     	; 0x268 <__vector_24+0x4c>
 236:	38 f4       	brcc	.+14     	; 0x246 <__vector_24+0x2a>
 238:	80 37       	cpi	r24, 0x70	; 112
 23a:	81 f0       	breq	.+32     	; 0x25c <__vector_24+0x40>
 23c:	80 38       	cpi	r24, 0x80	; 128
 23e:	a1 f0       	breq	.+40     	; 0x268 <__vector_24+0x4c>
 240:	80 36       	cpi	r24, 0x60	; 96
 242:	39 f5       	brne	.+78     	; 0x292 <__vector_24+0x76>
 244:	0b c0       	rjmp	.+22     	; 0x25c <__vector_24+0x40>
 246:	88 3b       	cpi	r24, 0xB8	; 184
 248:	c9 f0       	breq	.+50     	; 0x27c <__vector_24+0x60>
 24a:	18 f4       	brcc	.+6      	; 0x252 <__vector_24+0x36>
 24c:	88 3a       	cpi	r24, 0xA8	; 168
 24e:	b1 f0       	breq	.+44     	; 0x27c <__vector_24+0x60>
 250:	20 c0       	rjmp	.+64     	; 0x292 <__vector_24+0x76>
 252:	80 3c       	cpi	r24, 0xC0	; 192
 254:	c1 f0       	breq	.+48     	; 0x286 <__vector_24+0x6a>
 256:	88 3c       	cpi	r24, 0xC8	; 200
 258:	b1 f0       	breq	.+44     	; 0x286 <__vector_24+0x6a>
 25a:	1b c0       	rjmp	.+54     	; 0x292 <__vector_24+0x76>
		case 0x60:
		case 0x70:              //Direccionado con su direccion de esclavo
		TWCR |= (1 << TWINT); //
 25c:	ec eb       	ldi	r30, 0xBC	; 188
 25e:	f0 e0       	ldi	r31, 0x00	; 0
 260:	80 81       	ld	r24, Z
 262:	80 68       	ori	r24, 0x80	; 128
 264:	80 83       	st	Z, r24
		break;
 266:	1a c0       	rjmp	.+52     	; 0x29c <__vector_24+0x80>
		
		case 0x80:
		case 0x90:
		dato = TWDR;  //Recibi? el dato, llamada general
 268:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 26c:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <dato>
		TWCR |= 1 << TWINT; //Borra la bandera TWINT
 270:	ec eb       	ldi	r30, 0xBC	; 188
 272:	f0 e0       	ldi	r31, 0x00	; 0
 274:	80 81       	ld	r24, Z
 276:	80 68       	ori	r24, 0x80	; 128
 278:	80 83       	st	Z, r24
		break;
 27a:	10 c0       	rjmp	.+32     	; 0x29c <__vector_24+0x80>
		
		case 0xA8: // SLA+R recibido, maestro solicita lectura
		case 0xB8: // Dato transmitido y ACK recibido
		//TWDR = ; // Cargar el dato en el registro de datos*****************
		TWCR |= (1 << TWINT) | (1 << TWEN) | (1 << TWIE)| (1 << TWEA); // Listo para la prixima operacion
 27c:	ec eb       	ldi	r30, 0xBC	; 188
 27e:	f0 e0       	ldi	r31, 0x00	; 0
 280:	80 81       	ld	r24, Z
 282:	85 6c       	ori	r24, 0xC5	; 197
 284:	80 83       	st	Z, r24
		
		case 0xC0: // Dato transmitido y NACK recibido
		case 0xC8: // ?ltimo dato transmitido y ACK recibido
		TWCR |= (1 << TWINT) | (1 << TWEN) | (1 << TWEA); // Listo para la prixima operacion
 286:	ec eb       	ldi	r30, 0xBC	; 188
 288:	f0 e0       	ldi	r31, 0x00	; 0
 28a:	80 81       	ld	r24, Z
 28c:	84 6c       	ori	r24, 0xC4	; 196
 28e:	80 83       	st	Z, r24
		break;
 290:	05 c0       	rjmp	.+10     	; 0x29c <__vector_24+0x80>
		
		default:    //Libera el BUS de cualquier errror
		TWCR |= (1 << TWINT) | (1 << TWSTO);
 292:	ec eb       	ldi	r30, 0xBC	; 188
 294:	f0 e0       	ldi	r31, 0x00	; 0
 296:	80 81       	ld	r24, Z
 298:	80 69       	ori	r24, 0x90	; 144
 29a:	80 83       	st	Z, r24
		
	}
	
}
 29c:	ff 91       	pop	r31
 29e:	ef 91       	pop	r30
 2a0:	8f 91       	pop	r24
 2a2:	0f 90       	pop	r0
 2a4:	0f be       	out	0x3f, r0	; 63
 2a6:	0f 90       	pop	r0
 2a8:	1f 90       	pop	r1
 2aa:	18 95       	reti

000002ac <initUART9600>:

//Funcion de escritura de un caracter
void writeUART(char Caracter)
{
	while(!(UCSR0A & (1<<UDRE0)));  //hasta que la bandera este en 1
	UDR0 = Caracter;
 2ac:	8a b1       	in	r24, 0x0a	; 10
 2ae:	8e 7f       	andi	r24, 0xFE	; 254
 2b0:	8a b9       	out	0x0a, r24	; 10
 2b2:	8a b1       	in	r24, 0x0a	; 10
 2b4:	82 60       	ori	r24, 0x02	; 2
 2b6:	8a b9       	out	0x0a, r24	; 10
 2b8:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 2bc:	e1 ec       	ldi	r30, 0xC1	; 193
 2be:	f0 e0       	ldi	r31, 0x00	; 0
 2c0:	10 82       	st	Z, r1
 2c2:	80 81       	ld	r24, Z
 2c4:	88 69       	ori	r24, 0x98	; 152
 2c6:	80 83       	st	Z, r24
 2c8:	e2 ec       	ldi	r30, 0xC2	; 194
 2ca:	f0 e0       	ldi	r31, 0x00	; 0
 2cc:	10 82       	st	Z, r1
 2ce:	80 81       	ld	r24, Z
 2d0:	86 60       	ori	r24, 0x06	; 6
 2d2:	80 83       	st	Z, r24
 2d4:	87 e6       	ldi	r24, 0x67	; 103
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 2dc:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 2e0:	08 95       	ret

000002e2 <writeTextUART>:
 2e2:	ac 01       	movw	r20, r24
 2e4:	20 e0       	ldi	r18, 0x00	; 0
 2e6:	07 c0       	rjmp	.+14     	; 0x2f6 <writeTextUART+0x14>
 2e8:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 2ec:	95 ff       	sbrs	r25, 5
 2ee:	fc cf       	rjmp	.-8      	; 0x2e8 <writeTextUART+0x6>
 2f0:	30 93 c6 00 	sts	0x00C6, r19	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 2f4:	2f 5f       	subi	r18, 0xFF	; 255
 2f6:	fa 01       	movw	r30, r20
 2f8:	e2 0f       	add	r30, r18
 2fa:	f1 1d       	adc	r31, r1
 2fc:	30 81       	ld	r19, Z
 2fe:	31 11       	cpse	r19, r1
 300:	f3 cf       	rjmp	.-26     	; 0x2e8 <writeTextUART+0x6>
 302:	08 95       	ret

00000304 <UART_PrintNum>:
	
}

void UART_PrintNum(uint16_t num) {
 304:	cf 93       	push	r28
 306:	df 93       	push	r29
 308:	00 d0       	rcall	.+0      	; 0x30a <UART_PrintNum+0x6>
 30a:	00 d0       	rcall	.+0      	; 0x30c <UART_PrintNum+0x8>
 30c:	00 d0       	rcall	.+0      	; 0x30e <UART_PrintNum+0xa>
 30e:	cd b7       	in	r28, 0x3d	; 61
 310:	de b7       	in	r29, 0x3e	; 62
	char buffer[6];
	itoa(num, buffer, 10);
 312:	4a e0       	ldi	r20, 0x0A	; 10
 314:	50 e0       	ldi	r21, 0x00	; 0
 316:	be 01       	movw	r22, r28
 318:	6f 5f       	subi	r22, 0xFF	; 255
 31a:	7f 4f       	sbci	r23, 0xFF	; 255
 31c:	0e 94 a3 01 	call	0x346	; 0x346 <itoa>
	writeTextUART(buffer);
 320:	ce 01       	movw	r24, r28
 322:	01 96       	adiw	r24, 0x01	; 1
 324:	0e 94 71 01 	call	0x2e2	; 0x2e2 <writeTextUART>
}
 328:	26 96       	adiw	r28, 0x06	; 6
 32a:	0f b6       	in	r0, 0x3f	; 63
 32c:	f8 94       	cli
 32e:	de bf       	out	0x3e, r29	; 62
 330:	0f be       	out	0x3f, r0	; 63
 332:	cd bf       	out	0x3d, r28	; 61
 334:	df 91       	pop	r29
 336:	cf 91       	pop	r28
 338:	08 95       	ret

0000033a <__tablejump2__>:
 33a:	ee 0f       	add	r30, r30
 33c:	ff 1f       	adc	r31, r31
 33e:	05 90       	lpm	r0, Z+
 340:	f4 91       	lpm	r31, Z
 342:	e0 2d       	mov	r30, r0
 344:	09 94       	ijmp

00000346 <itoa>:
 346:	45 32       	cpi	r20, 0x25	; 37
 348:	51 05       	cpc	r21, r1
 34a:	20 f4       	brcc	.+8      	; 0x354 <itoa+0xe>
 34c:	42 30       	cpi	r20, 0x02	; 2
 34e:	10 f0       	brcs	.+4      	; 0x354 <itoa+0xe>
 350:	0c 94 ae 01 	jmp	0x35c	; 0x35c <__itoa_ncheck>
 354:	fb 01       	movw	r30, r22
 356:	10 82       	st	Z, r1
 358:	cb 01       	movw	r24, r22
 35a:	08 95       	ret

0000035c <__itoa_ncheck>:
 35c:	bb 27       	eor	r27, r27
 35e:	4a 30       	cpi	r20, 0x0A	; 10
 360:	31 f4       	brne	.+12     	; 0x36e <__itoa_ncheck+0x12>
 362:	99 23       	and	r25, r25
 364:	22 f4       	brpl	.+8      	; 0x36e <__itoa_ncheck+0x12>
 366:	bd e2       	ldi	r27, 0x2D	; 45
 368:	90 95       	com	r25
 36a:	81 95       	neg	r24
 36c:	9f 4f       	sbci	r25, 0xFF	; 255
 36e:	0c 94 ba 01 	jmp	0x374	; 0x374 <__utoa_common>

00000372 <__utoa_ncheck>:
 372:	bb 27       	eor	r27, r27

00000374 <__utoa_common>:
 374:	fb 01       	movw	r30, r22
 376:	55 27       	eor	r21, r21
 378:	aa 27       	eor	r26, r26
 37a:	88 0f       	add	r24, r24
 37c:	99 1f       	adc	r25, r25
 37e:	aa 1f       	adc	r26, r26
 380:	a4 17       	cp	r26, r20
 382:	10 f0       	brcs	.+4      	; 0x388 <__utoa_common+0x14>
 384:	a4 1b       	sub	r26, r20
 386:	83 95       	inc	r24
 388:	50 51       	subi	r21, 0x10	; 16
 38a:	b9 f7       	brne	.-18     	; 0x37a <__utoa_common+0x6>
 38c:	a0 5d       	subi	r26, 0xD0	; 208
 38e:	aa 33       	cpi	r26, 0x3A	; 58
 390:	08 f0       	brcs	.+2      	; 0x394 <__utoa_common+0x20>
 392:	a9 5d       	subi	r26, 0xD9	; 217
 394:	a1 93       	st	Z+, r26
 396:	00 97       	sbiw	r24, 0x00	; 0
 398:	79 f7       	brne	.-34     	; 0x378 <__utoa_common+0x4>
 39a:	b1 11       	cpse	r27, r1
 39c:	b1 93       	st	Z+, r27
 39e:	11 92       	st	Z+, r1
 3a0:	cb 01       	movw	r24, r22
 3a2:	0c 94 d3 01 	jmp	0x3a6	; 0x3a6 <strrev>

000003a6 <strrev>:
 3a6:	dc 01       	movw	r26, r24
 3a8:	fc 01       	movw	r30, r24
 3aa:	67 2f       	mov	r22, r23
 3ac:	71 91       	ld	r23, Z+
 3ae:	77 23       	and	r23, r23
 3b0:	e1 f7       	brne	.-8      	; 0x3aa <strrev+0x4>
 3b2:	32 97       	sbiw	r30, 0x02	; 2
 3b4:	04 c0       	rjmp	.+8      	; 0x3be <strrev+0x18>
 3b6:	7c 91       	ld	r23, X
 3b8:	6d 93       	st	X+, r22
 3ba:	70 83       	st	Z, r23
 3bc:	62 91       	ld	r22, -Z
 3be:	ae 17       	cp	r26, r30
 3c0:	bf 07       	cpc	r27, r31
 3c2:	c8 f3       	brcs	.-14     	; 0x3b6 <strrev+0x10>
 3c4:	08 95       	ret

000003c6 <_exit>:
 3c6:	f8 94       	cli

000003c8 <__stop_program>:
 3c8:	ff cf       	rjmp	.-2      	; 0x3c8 <__stop_program>
