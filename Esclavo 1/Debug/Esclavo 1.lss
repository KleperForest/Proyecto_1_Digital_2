
Esclavo 1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000f24  00000fb8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f24  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000011  0080010a  0080010a  00000fc2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000fc2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ff4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  00001034  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001f30  00000000  00000000  0000114c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b24  00000000  00000000  0000307c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011c4  00000000  00000000  00003ba0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c4  00000000  00000000  00004d64  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005e8  00000000  00000000  00004f28  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001343  00000000  00000000  00005510  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  00006853  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 67 05 	jmp	0xace	; 0xace <__vector_24>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e2       	ldi	r30, 0x24	; 36
  7c:	ff e0       	ldi	r31, 0x0F	; 15
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e0       	ldi	r26, 0x0A	; 10
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ab 31       	cpi	r26, 0x1B	; 27
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 83 00 	call	0x106	; 0x106 <main>
  9e:	0c 94 90 07 	jmp	0xf20	; 0xf20 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <I2C_Config_SLAVE>:


uint8_t esclavo, dato, aux;

void I2C_Config_SLAVE(uint8_t address){
	DDRC &= ~((1<<DDC4) | (1<<DDC5));
  a6:	97 b1       	in	r25, 0x07	; 7
  a8:	9f 7c       	andi	r25, 0xCF	; 207
  aa:	97 b9       	out	0x07, r25	; 7
	
	address <<= 1;  //Ubica la dirección y
  ac:	88 0f       	add	r24, r24
	address |= 0x01; //habilita para reconocer las llamadas generales de I2C
  ae:	81 60       	ori	r24, 0x01	; 1
	TWAR = address;
  b0:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7f80ba>
	
	TWCR = (1 << TWEA) | (1 << TWEN) | (1 << TWIE); //Habilita el BUS, con reconocimiento e interrupción
  b4:	85 e4       	ldi	r24, 0x45	; 69
  b6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  ba:	08 95       	ret

000000bc <setup>:

uint16_t distance = 0;
 
void setup(void);
void setup(void){
	cli();  //Apagar interrupciones
  bc:	f8 94       	cli
	
	DDRB |= (1 << PORTB2) | (1 << PORTB1) | (1 << PORTB3) | (1 << PORTB4); //PB1, PB2, PB3 como salida de servos 1,2,3, PB4 como salida de banda transportadora
  be:	84 b1       	in	r24, 0x04	; 4
  c0:	8e 61       	ori	r24, 0x1E	; 30
  c2:	84 b9       	out	0x04, r24	; 4
	DDRD |= (1 << DDD3) ;   //PD3 como salida de servo 4
  c4:	8a b1       	in	r24, 0x0a	; 10
  c6:	88 60       	ori	r24, 0x08	; 8
  c8:	8a b9       	out	0x0a, r24	; 10
	//channelA, conectado a elevar y bajar garra
	//channelB, conetado a elevar y bajar brazo completo
	//channel2A, conectado a la garra
	//channel2B, conectado a rotar a garra
	
	initFastPWM1(8);  //Iniciar funcion de FASTPWM en timer1
  ca:	88 e0       	ldi	r24, 0x08	; 8
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <initFastPWM1>
	channel(channelB, modo);
  d2:	60 e0       	ldi	r22, 0x00	; 0
  d4:	82 e0       	ldi	r24, 0x02	; 2
  d6:	0e 94 ca 05 	call	0xb94	; 0xb94 <channel>
	channel(channelA, modo);
  da:	60 e0       	ldi	r22, 0x00	; 0
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	0e 94 ca 05 	call	0xb94	; 0xb94 <channel>
	topValue(29999);   //Valor alto de desbordamiento para 1 a 2 ms que se necesita de servo
  e2:	8f e2       	ldi	r24, 0x2F	; 47
  e4:	95 e7       	ldi	r25, 0x75	; 117
  e6:	0e 94 12 06 	call	0xc24	; 0xc24 <topValue>

	initFastPWM2();  //Iniciar funcion de FASTPWM en timer2
  ea:	0e 94 52 06 	call	0xca4	; 0xca4 <initFastPWM2>
	
	I2C_Config_SLAVE(0x03);   //Iniciar el I2C como esclavo, enviarle su dirección
  ee:	83 e0       	ldi	r24, 0x03	; 3
  f0:	0e 94 53 00 	call	0xa6	; 0xa6 <I2C_Config_SLAVE>
	initUART9600();  //Iniciar UART
  f4:	0e 94 a1 06 	call	0xd42	; 0xd42 <initUART9600>
	initUltrasonic(); //Iniciar sensor Ultrasónico
  f8:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <initUltrasonic>
	
	PORTB |= ~(1 << PORTB4);  //Iniciar con la banda transportadora apagada
  fc:	85 b1       	in	r24, 0x05	; 5
  fe:	8f 6e       	ori	r24, 0xEF	; 239
 100:	85 b9       	out	0x05, r24	; 5


	sei();   //Activar interrupciones
 102:	78 94       	sei
 104:	08 95       	ret

00000106 <main>:



int main(void)
{
	setup();
 106:	0e 94 5e 00 	call	0xbc	; 0xbc <setup>
	while(1)
	{
		
		
		
		if (dato_a_recibirI2C != 0)  //Cuando se recibe algo por I2C
 10a:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <dato_a_recibirI2C>
 10e:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <dato_a_recibirI2C+0x1>
 112:	00 97       	sbiw	r24, 0x00	; 0
 114:	09 f4       	brne	.+2      	; 0x118 <main+0x12>
 116:	8f c4       	rjmp	.+2334   	; 0xa36 <__stack+0x137>
		{
			if (dato_a_recibirI2C == 1)        //Verificar el número de servo y aumentar o disminuir su ángulo
 118:	81 30       	cpi	r24, 0x01	; 1
 11a:	91 05       	cpc	r25, r1
 11c:	99 f4       	brne	.+38     	; 0x144 <main+0x3e>
			{
				codo = codo + 5;
 11e:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <codo>
 122:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <codo+0x1>
 126:	2b 5f       	subi	r18, 0xFB	; 251
 128:	3f 4f       	sbci	r19, 0xFF	; 255
 12a:	30 93 07 01 	sts	0x0107, r19	; 0x800107 <codo+0x1>
 12e:	20 93 06 01 	sts	0x0106, r18	; 0x800106 <codo>
				if (codo >= 254)
 132:	2e 3f       	cpi	r18, 0xFE	; 254
 134:	31 05       	cpc	r19, r1
 136:	34 f0       	brlt	.+12     	; 0x144 <main+0x3e>
				{
					codo = 255;
 138:	2f ef       	ldi	r18, 0xFF	; 255
 13a:	30 e0       	ldi	r19, 0x00	; 0
 13c:	30 93 07 01 	sts	0x0107, r19	; 0x800107 <codo+0x1>
 140:	20 93 06 01 	sts	0x0106, r18	; 0x800106 <codo>
				}
			
			}
			
			if (dato_a_recibirI2C == 2)
 144:	82 30       	cpi	r24, 0x02	; 2
 146:	91 05       	cpc	r25, r1
 148:	89 f4       	brne	.+34     	; 0x16c <main+0x66>
			{
			
				codo = codo - 5;
 14a:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <codo>
 14e:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <codo+0x1>
 152:	25 50       	subi	r18, 0x05	; 5
 154:	31 09       	sbc	r19, r1
 156:	30 93 07 01 	sts	0x0107, r19	; 0x800107 <codo+0x1>
 15a:	20 93 06 01 	sts	0x0106, r18	; 0x800106 <codo>
				if (codo <= 1)
 15e:	22 30       	cpi	r18, 0x02	; 2
 160:	31 05       	cpc	r19, r1
 162:	24 f4       	brge	.+8      	; 0x16c <main+0x66>
				{
					codo = 0;
 164:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <codo+0x1>
 168:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <codo>
				}
				
			}
			
			if (dato_a_recibirI2C == 4)
 16c:	84 30       	cpi	r24, 0x04	; 4
 16e:	91 05       	cpc	r25, r1
 170:	99 f4       	brne	.+38     	; 0x198 <main+0x92>
			{
				brazo = brazo + 5;
 172:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <brazo>
 176:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <brazo+0x1>
 17a:	2b 5f       	subi	r18, 0xFB	; 251
 17c:	3f 4f       	sbci	r19, 0xFF	; 255
 17e:	30 93 03 01 	sts	0x0103, r19	; 0x800103 <brazo+0x1>
 182:	20 93 02 01 	sts	0x0102, r18	; 0x800102 <brazo>
				if (brazo >= 254)
 186:	2e 3f       	cpi	r18, 0xFE	; 254
 188:	31 05       	cpc	r19, r1
 18a:	34 f0       	brlt	.+12     	; 0x198 <main+0x92>
				{
					brazo = 255;
 18c:	2f ef       	ldi	r18, 0xFF	; 255
 18e:	30 e0       	ldi	r19, 0x00	; 0
 190:	30 93 03 01 	sts	0x0103, r19	; 0x800103 <brazo+0x1>
 194:	20 93 02 01 	sts	0x0102, r18	; 0x800102 <brazo>
				}
				
			}
			
			if (dato_a_recibirI2C == 3)
 198:	83 30       	cpi	r24, 0x03	; 3
 19a:	91 05       	cpc	r25, r1
 19c:	89 f4       	brne	.+34     	; 0x1c0 <main+0xba>
			{
				
				brazo = brazo - 5;
 19e:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <brazo>
 1a2:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <brazo+0x1>
 1a6:	25 50       	subi	r18, 0x05	; 5
 1a8:	31 09       	sbc	r19, r1
 1aa:	30 93 03 01 	sts	0x0103, r19	; 0x800103 <brazo+0x1>
 1ae:	20 93 02 01 	sts	0x0102, r18	; 0x800102 <brazo>
				if (brazo <= 1)
 1b2:	22 30       	cpi	r18, 0x02	; 2
 1b4:	31 05       	cpc	r19, r1
 1b6:	24 f4       	brge	.+8      	; 0x1c0 <main+0xba>
				{
					brazo = 0;
 1b8:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <brazo+0x1>
 1bc:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <brazo>
				}
				
				
			}
				
			if (dato_a_recibirI2C == 6)
 1c0:	86 30       	cpi	r24, 0x06	; 6
 1c2:	91 05       	cpc	r25, r1
 1c4:	99 f4       	brne	.+38     	; 0x1ec <main+0xe6>
			{
				rota = rota + 2;
 1c6:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1ca:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1ce:	2e 5f       	subi	r18, 0xFE	; 254
 1d0:	3f 4f       	sbci	r19, 0xFF	; 255
 1d2:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1d6:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__DATA_REGION_ORIGIN__>
				if (rota >= 254)
 1da:	2e 3f       	cpi	r18, 0xFE	; 254
 1dc:	31 05       	cpc	r19, r1
 1de:	34 f0       	brlt	.+12     	; 0x1ec <main+0xe6>
				{
					rota = 255;
 1e0:	2f ef       	ldi	r18, 0xFF	; 255
 1e2:	30 e0       	ldi	r19, 0x00	; 0
 1e4:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1e8:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__DATA_REGION_ORIGIN__>
				}
				
			}
			
			if (dato_a_recibirI2C == 5)
 1ec:	85 30       	cpi	r24, 0x05	; 5
 1ee:	91 05       	cpc	r25, r1
 1f0:	89 f4       	brne	.+34     	; 0x214 <main+0x10e>
			{
				
				rota = rota - 2;
 1f2:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1f6:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1fa:	22 50       	subi	r18, 0x02	; 2
 1fc:	31 09       	sbc	r19, r1
 1fe:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 202:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__DATA_REGION_ORIGIN__>
				if (rota <= 1)
 206:	22 30       	cpi	r18, 0x02	; 2
 208:	31 05       	cpc	r19, r1
 20a:	24 f4       	brge	.+8      	; 0x214 <main+0x10e>
				{
					rota = 0;
 20c:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 210:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
				}
				
			}
			
			if (dato_a_recibirI2C == 7)
 214:	87 30       	cpi	r24, 0x07	; 7
 216:	91 05       	cpc	r25, r1
 218:	99 f4       	brne	.+38     	; 0x240 <main+0x13a>
			{
				garra = garra + 7;
 21a:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <garra>
 21e:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <garra+0x1>
 222:	29 5f       	subi	r18, 0xF9	; 249
 224:	3f 4f       	sbci	r19, 0xFF	; 255
 226:	30 93 05 01 	sts	0x0105, r19	; 0x800105 <garra+0x1>
 22a:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <garra>
				if (garra >= 254)
 22e:	2e 3f       	cpi	r18, 0xFE	; 254
 230:	31 05       	cpc	r19, r1
 232:	34 f0       	brlt	.+12     	; 0x240 <main+0x13a>
				{
					garra = 255;
 234:	2f ef       	ldi	r18, 0xFF	; 255
 236:	30 e0       	ldi	r19, 0x00	; 0
 238:	30 93 05 01 	sts	0x0105, r19	; 0x800105 <garra+0x1>
 23c:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <garra>
				}
				
			}
			
			if (dato_a_recibirI2C == 8)
 240:	88 30       	cpi	r24, 0x08	; 8
 242:	91 05       	cpc	r25, r1
 244:	89 f4       	brne	.+34     	; 0x268 <main+0x162>
			{
				
				garra = garra - 7;
 246:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <garra>
 24a:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <garra+0x1>
 24e:	27 50       	subi	r18, 0x07	; 7
 250:	31 09       	sbc	r19, r1
 252:	30 93 05 01 	sts	0x0105, r19	; 0x800105 <garra+0x1>
 256:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <garra>
				if (garra <= 1)
 25a:	22 30       	cpi	r18, 0x02	; 2
 25c:	31 05       	cpc	r19, r1
 25e:	24 f4       	brge	.+8      	; 0x268 <main+0x162>
				{
					garra = 0;
 260:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <garra+0x1>
 264:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <garra>
				}
			
			}
			
			if (dato_a_recibirI2C == 10)
 268:	8a 30       	cpi	r24, 0x0A	; 10
 26a:	91 05       	cpc	r25, r1
 26c:	19 f4       	brne	.+6      	; 0x274 <main+0x16e>
			{
				
				sistema_activado = 1;
 26e:	21 e0       	ldi	r18, 0x01	; 1
 270:	20 93 0e 01 	sts	0x010E, r18	; 0x80010e <sistema_activado>
				
			}
			
			if (dato_a_recibirI2C == 11)
 274:	8b 30       	cpi	r24, 0x0B	; 11
 276:	91 05       	cpc	r25, r1
 278:	31 f4       	brne	.+12     	; 0x286 <main+0x180>
			{
				sistema_activado = 0;
 27a:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <sistema_activado>
				dato_a_enviarI2C = 0;
 27e:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <dato_a_enviarI2C+0x1>
 282:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <dato_a_enviarI2C>
				
			}
			
			if (dato_a_recibirI2C == 20)   //Si se detecto gas
 286:	44 97       	sbiw	r24, 0x14	; 20
 288:	59 f4       	brne	.+22     	; 0x2a0 <main+0x19a>
			{
				dato_a_enviarI2C = 1;
 28a:	81 e0       	ldi	r24, 0x01	; 1
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <dato_a_enviarI2C+0x1>
 292:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <dato_a_enviarI2C>
				sistema_activado = 0;
 296:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <sistema_activado>
				PORTB &= ~(1 << PORTB4);  // Apaga PB4
 29a:	85 b1       	in	r24, 0x05	; 5
 29c:	8f 7e       	andi	r24, 0xEF	; 239
 29e:	85 b9       	out	0x05, r24	; 5
			}
			
			if (dato_a_recibirI2C == 12)
 2a0:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <dato_a_recibirI2C>
 2a4:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <dato_a_recibirI2C+0x1>
 2a8:	0c 97       	sbiw	r24, 0x0c	; 12
 2aa:	39 f4       	brne	.+14     	; 0x2ba <main+0x1b4>
			{
				if (sistema_activado==1)
 2ac:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <sistema_activado>
 2b0:	81 30       	cpi	r24, 0x01	; 1
 2b2:	19 f4       	brne	.+6      	; 0x2ba <main+0x1b4>
				{
					PORTB |= (1 << PORTB4); 
 2b4:	85 b1       	in	r24, 0x05	; 5
 2b6:	80 61       	ori	r24, 0x10	; 16
 2b8:	85 b9       	out	0x05, r24	; 5
				}
			}
			
			if (dato_a_recibirI2C == 75)    //Reinicio del sistema
 2ba:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <dato_a_recibirI2C>
 2be:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <dato_a_recibirI2C+0x1>
 2c2:	8b 34       	cpi	r24, 0x4B	; 75
 2c4:	91 05       	cpc	r25, r1
 2c6:	21 f4       	brne	.+8      	; 0x2d0 <main+0x1ca>
			{
				dato_a_enviarI2C = 0;
 2c8:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <dato_a_enviarI2C+0x1>
 2cc:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <dato_a_enviarI2C>
			}
			
			
			if (dato_a_recibirI2C == 13)  //Cuando la caja llegue al final de la banda
 2d0:	0d 97       	sbiw	r24, 0x0d	; 13
 2d2:	09 f0       	breq	.+2      	; 0x2d6 <main+0x1d0>
 2d4:	ac c3       	rjmp	.+1880   	; 0xa2e <__stack+0x12f>
			{
				if (sistema_activado==1)
 2d6:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <sistema_activado>
 2da:	81 30       	cpi	r24, 0x01	; 1
 2dc:	09 f0       	breq	.+2      	; 0x2e0 <main+0x1da>
 2de:	a7 c3       	rjmp	.+1870   	; 0xa2e <__stack+0x12f>
				{
					PORTB &= ~(1 << PORTB4);  // Apaga PB4
 2e0:	85 b1       	in	r24, 0x05	; 5
 2e2:	8f 7e       	andi	r24, 0xEF	; 239
 2e4:	85 b9       	out	0x05, r24	; 5
					
					if (cajas == 2)
 2e6:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <cajas>
 2ea:	82 30       	cpi	r24, 0x02	; 2
 2ec:	09 f0       	breq	.+2      	; 0x2f0 <main+0x1ea>
 2ee:	cf c1       	rjmp	.+926    	; 0x68e <__EEPROM_REGION_LENGTH__+0x28e>
					{
						convertServo(80, channelB);
 2f0:	62 e0       	ldi	r22, 0x02	; 2
 2f2:	80 e5       	ldi	r24, 0x50	; 80
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	0e 94 23 06 	call	0xc46	; 0xc46 <convertServo>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2fa:	2f ef       	ldi	r18, 0xFF	; 255
 2fc:	83 ec       	ldi	r24, 0xC3	; 195
 2fe:	99 e0       	ldi	r25, 0x09	; 9
 300:	21 50       	subi	r18, 0x01	; 1
 302:	80 40       	sbci	r24, 0x00	; 0
 304:	90 40       	sbci	r25, 0x00	; 0
 306:	e1 f7       	brne	.-8      	; 0x300 <main+0x1fa>
 308:	00 c0       	rjmp	.+0      	; 0x30a <main+0x204>
 30a:	00 00       	nop
						_delay_ms(200);
						convertServo2(143, channel2B);
 30c:	62 e0       	ldi	r22, 0x02	; 2
 30e:	8f e8       	ldi	r24, 0x8F	; 143
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <convertServo2>
 316:	8f e1       	ldi	r24, 0x1F	; 31
 318:	9e e4       	ldi	r25, 0x4E	; 78
 31a:	01 97       	sbiw	r24, 0x01	; 1
 31c:	f1 f7       	brne	.-4      	; 0x31a <main+0x214>
 31e:	00 c0       	rjmp	.+0      	; 0x320 <main+0x21a>
 320:	00 00       	nop
						_delay_ms(5);
						convertServo2(50, channel2A);
 322:	61 e0       	ldi	r22, 0x01	; 1
 324:	82 e3       	ldi	r24, 0x32	; 50
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <convertServo2>
 32c:	8f e1       	ldi	r24, 0x1F	; 31
 32e:	9e e4       	ldi	r25, 0x4E	; 78
 330:	01 97       	sbiw	r24, 0x01	; 1
 332:	f1 f7       	brne	.-4      	; 0x330 <main+0x22a>
 334:	00 c0       	rjmp	.+0      	; 0x336 <main+0x230>
 336:	00 00       	nop
						_delay_ms(5);
						convertServo(180,channelA);
 338:	61 e0       	ldi	r22, 0x01	; 1
 33a:	84 eb       	ldi	r24, 0xB4	; 180
 33c:	90 e0       	ldi	r25, 0x00	; 0
 33e:	0e 94 23 06 	call	0xc46	; 0xc46 <convertServo>
 342:	9f ef       	ldi	r25, 0xFF	; 255
 344:	20 e7       	ldi	r18, 0x70	; 112
 346:	82 e0       	ldi	r24, 0x02	; 2
 348:	91 50       	subi	r25, 0x01	; 1
 34a:	20 40       	sbci	r18, 0x00	; 0
 34c:	80 40       	sbci	r24, 0x00	; 0
 34e:	e1 f7       	brne	.-8      	; 0x348 <main+0x242>
 350:	00 c0       	rjmp	.+0      	; 0x352 <main+0x24c>
 352:	00 00       	nop

						
						_delay_ms(50);
						for (garra = garra; garra<=255; garra++)
 354:	12 c0       	rjmp	.+36     	; 0x37a <main+0x274>
						{
							convertServo2(garra, channel2A);
 356:	61 e0       	ldi	r22, 0x01	; 1
 358:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <convertServo2>
 35c:	8f e5       	ldi	r24, 0x5F	; 95
 35e:	9a ee       	ldi	r25, 0xEA	; 234
 360:	01 97       	sbiw	r24, 0x01	; 1
 362:	f1 f7       	brne	.-4      	; 0x360 <main+0x25a>
 364:	00 c0       	rjmp	.+0      	; 0x366 <main+0x260>
 366:	00 00       	nop
						_delay_ms(5);
						convertServo(180,channelA);

						
						_delay_ms(50);
						for (garra = garra; garra<=255; garra++)
 368:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <garra>
 36c:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <garra+0x1>
 370:	01 96       	adiw	r24, 0x01	; 1
 372:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <garra+0x1>
 376:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <garra>
 37a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <garra>
 37e:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <garra+0x1>
 382:	8f 3f       	cpi	r24, 0xFF	; 255
 384:	91 05       	cpc	r25, r1
 386:	39 f3       	breq	.-50     	; 0x356 <main+0x250>
 388:	34 f3       	brlt	.-52     	; 0x356 <main+0x250>
 38a:	9f ef       	ldi	r25, 0xFF	; 255
 38c:	29 ef       	ldi	r18, 0xF9	; 249
 38e:	80 e0       	ldi	r24, 0x00	; 0
 390:	91 50       	subi	r25, 0x01	; 1
 392:	20 40       	sbci	r18, 0x00	; 0
 394:	80 40       	sbci	r24, 0x00	; 0
 396:	e1 f7       	brne	.-8      	; 0x390 <main+0x28a>
 398:	00 c0       	rjmp	.+0      	; 0x39a <main+0x294>
 39a:	00 00       	nop
							_delay_ms(15);
							
						}
						_delay_ms(20);
						
						for (brazo = brazo; brazo<=120; brazo++)
 39c:	12 c0       	rjmp	.+36     	; 0x3c2 <main+0x2bc>
						{
							convertServo(brazo, channelB);
 39e:	62 e0       	ldi	r22, 0x02	; 2
 3a0:	0e 94 23 06 	call	0xc46	; 0xc46 <convertServo>
 3a4:	8f e5       	ldi	r24, 0x5F	; 95
 3a6:	9a ee       	ldi	r25, 0xEA	; 234
 3a8:	01 97       	sbiw	r24, 0x01	; 1
 3aa:	f1 f7       	brne	.-4      	; 0x3a8 <main+0x2a2>
 3ac:	00 c0       	rjmp	.+0      	; 0x3ae <main+0x2a8>
 3ae:	00 00       	nop
							_delay_ms(15);
							
						}
						_delay_ms(20);
						
						for (brazo = brazo; brazo<=120; brazo++)
 3b0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <brazo>
 3b4:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <brazo+0x1>
 3b8:	01 96       	adiw	r24, 0x01	; 1
 3ba:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <brazo+0x1>
 3be:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <brazo>
 3c2:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <brazo>
 3c6:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <brazo+0x1>
 3ca:	89 37       	cpi	r24, 0x79	; 121
 3cc:	91 05       	cpc	r25, r1
 3ce:	3c f3       	brlt	.-50     	; 0x39e <main+0x298>
 3d0:	9f ef       	ldi	r25, 0xFF	; 255
 3d2:	29 ef       	ldi	r18, 0xF9	; 249
 3d4:	80 e0       	ldi	r24, 0x00	; 0
 3d6:	91 50       	subi	r25, 0x01	; 1
 3d8:	20 40       	sbci	r18, 0x00	; 0
 3da:	80 40       	sbci	r24, 0x00	; 0
 3dc:	e1 f7       	brne	.-8      	; 0x3d6 <main+0x2d0>
 3de:	00 c0       	rjmp	.+0      	; 0x3e0 <main+0x2da>
 3e0:	00 00       	nop
							_delay_ms(15);
							
						}
						_delay_ms(20);

						for (codo = codo; codo<=250; codo++)
 3e2:	12 c0       	rjmp	.+36     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
						{
							convertServo(codo,channelA);
 3e4:	61 e0       	ldi	r22, 0x01	; 1
 3e6:	0e 94 23 06 	call	0xc46	; 0xc46 <convertServo>
 3ea:	8f e5       	ldi	r24, 0x5F	; 95
 3ec:	9a ee       	ldi	r25, 0xEA	; 234
 3ee:	01 97       	sbiw	r24, 0x01	; 1
 3f0:	f1 f7       	brne	.-4      	; 0x3ee <main+0x2e8>
 3f2:	00 c0       	rjmp	.+0      	; 0x3f4 <main+0x2ee>
 3f4:	00 00       	nop
							_delay_ms(15);
							
						}
						_delay_ms(20);

						for (codo = codo; codo<=250; codo++)
 3f6:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <codo>
 3fa:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <codo+0x1>
 3fe:	01 96       	adiw	r24, 0x01	; 1
 400:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <codo+0x1>
 404:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <codo>
 408:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <codo>
 40c:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <codo+0x1>
 410:	8b 3f       	cpi	r24, 0xFB	; 251
 412:	91 05       	cpc	r25, r1
 414:	3c f3       	brlt	.-50     	; 0x3e4 <main+0x2de>
 416:	9f ef       	ldi	r25, 0xFF	; 255
 418:	29 ef       	ldi	r18, 0xF9	; 249
 41a:	80 e0       	ldi	r24, 0x00	; 0
 41c:	91 50       	subi	r25, 0x01	; 1
 41e:	20 40       	sbci	r18, 0x00	; 0
 420:	80 40       	sbci	r24, 0x00	; 0
 422:	e1 f7       	brne	.-8      	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 424:	00 c0       	rjmp	.+0      	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
 426:	00 00       	nop
							_delay_ms(15);
							
						}
						
						_delay_ms(20);
						for (garra = garra; garra>=190; garra--)
 428:	12 c0       	rjmp	.+36     	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
						{
							convertServo2(garra, channel2A);
 42a:	61 e0       	ldi	r22, 0x01	; 1
 42c:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <convertServo2>
 430:	8f e5       	ldi	r24, 0x5F	; 95
 432:	9a ee       	ldi	r25, 0xEA	; 234
 434:	01 97       	sbiw	r24, 0x01	; 1
 436:	f1 f7       	brne	.-4      	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 438:	00 c0       	rjmp	.+0      	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
 43a:	00 00       	nop
							_delay_ms(15);
							
						}
						
						_delay_ms(20);
						for (garra = garra; garra>=190; garra--)
 43c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <garra>
 440:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <garra+0x1>
 444:	01 97       	sbiw	r24, 0x01	; 1
 446:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <garra+0x1>
 44a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <garra>
 44e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <garra>
 452:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <garra+0x1>
 456:	8e 3b       	cpi	r24, 0xBE	; 190
 458:	91 05       	cpc	r25, r1
 45a:	3c f7       	brge	.-50     	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 45c:	9f ef       	ldi	r25, 0xFF	; 255
 45e:	23 ef       	ldi	r18, 0xF3	; 243
 460:	81 e0       	ldi	r24, 0x01	; 1
 462:	91 50       	subi	r25, 0x01	; 1
 464:	20 40       	sbci	r18, 0x00	; 0
 466:	80 40       	sbci	r24, 0x00	; 0
 468:	e1 f7       	brne	.-8      	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
 46a:	00 c0       	rjmp	.+0      	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
 46c:	00 00       	nop
							
						}
						
						_delay_ms(40);
						
						for (codo = codo; codo>=200; codo--)
 46e:	12 c0       	rjmp	.+36     	; 0x494 <__EEPROM_REGION_LENGTH__+0x94>
						{
							convertServo(codo,channelA);
 470:	61 e0       	ldi	r22, 0x01	; 1
 472:	0e 94 23 06 	call	0xc46	; 0xc46 <convertServo>
 476:	8f e5       	ldi	r24, 0x5F	; 95
 478:	9a ee       	ldi	r25, 0xEA	; 234
 47a:	01 97       	sbiw	r24, 0x01	; 1
 47c:	f1 f7       	brne	.-4      	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
 47e:	00 c0       	rjmp	.+0      	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
 480:	00 00       	nop
							
						}
						
						_delay_ms(40);
						
						for (codo = codo; codo>=200; codo--)
 482:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <codo>
 486:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <codo+0x1>
 48a:	01 97       	sbiw	r24, 0x01	; 1
 48c:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <codo+0x1>
 490:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <codo>
 494:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <codo>
 498:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <codo+0x1>
 49c:	88 3c       	cpi	r24, 0xC8	; 200
 49e:	91 05       	cpc	r25, r1
 4a0:	3c f7       	brge	.-50     	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
 4a2:	9f ef       	ldi	r25, 0xFF	; 255
 4a4:	29 ef       	ldi	r18, 0xF9	; 249
 4a6:	80 e0       	ldi	r24, 0x00	; 0
 4a8:	91 50       	subi	r25, 0x01	; 1
 4aa:	20 40       	sbci	r18, 0x00	; 0
 4ac:	80 40       	sbci	r24, 0x00	; 0
 4ae:	e1 f7       	brne	.-8      	; 0x4a8 <__EEPROM_REGION_LENGTH__+0xa8>
 4b0:	00 c0       	rjmp	.+0      	; 0x4b2 <__EEPROM_REGION_LENGTH__+0xb2>
 4b2:	00 00       	nop
							
						}
						
						_delay_ms(20);
						
						for (rota = rota; rota<=182; rota++)
 4b4:	12 c0       	rjmp	.+36     	; 0x4da <__EEPROM_REGION_LENGTH__+0xda>
						{
							convertServo2(rota, channel2B);
 4b6:	62 e0       	ldi	r22, 0x02	; 2
 4b8:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <convertServo2>
 4bc:	8f e5       	ldi	r24, 0x5F	; 95
 4be:	9a ee       	ldi	r25, 0xEA	; 234
 4c0:	01 97       	sbiw	r24, 0x01	; 1
 4c2:	f1 f7       	brne	.-4      	; 0x4c0 <__EEPROM_REGION_LENGTH__+0xc0>
 4c4:	00 c0       	rjmp	.+0      	; 0x4c6 <__EEPROM_REGION_LENGTH__+0xc6>
 4c6:	00 00       	nop
							
						}
						
						_delay_ms(20);
						
						for (rota = rota; rota<=182; rota++)
 4c8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 4cc:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 4d0:	01 96       	adiw	r24, 0x01	; 1
 4d2:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 4d6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 4da:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 4de:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 4e2:	87 3b       	cpi	r24, 0xB7	; 183
 4e4:	91 05       	cpc	r25, r1
 4e6:	3c f3       	brlt	.-50     	; 0x4b6 <__EEPROM_REGION_LENGTH__+0xb6>
 4e8:	9f ef       	ldi	r25, 0xFF	; 255
 4ea:	23 ed       	ldi	r18, 0xD3	; 211
 4ec:	80 e3       	ldi	r24, 0x30	; 48
 4ee:	91 50       	subi	r25, 0x01	; 1
 4f0:	20 40       	sbci	r18, 0x00	; 0
 4f2:	80 40       	sbci	r24, 0x00	; 0
 4f4:	e1 f7       	brne	.-8      	; 0x4ee <__EEPROM_REGION_LENGTH__+0xee>
 4f6:	00 c0       	rjmp	.+0      	; 0x4f8 <__EEPROM_REGION_LENGTH__+0xf8>
 4f8:	00 00       	nop
							
						}
						
						_delay_ms(1000);
						
						for (brazo = brazo; brazo<=160; brazo++)
 4fa:	12 c0       	rjmp	.+36     	; 0x520 <__EEPROM_REGION_LENGTH__+0x120>
						{
							convertServo(brazo, channelB);
 4fc:	62 e0       	ldi	r22, 0x02	; 2
 4fe:	0e 94 23 06 	call	0xc46	; 0xc46 <convertServo>
 502:	8f e5       	ldi	r24, 0x5F	; 95
 504:	9a ee       	ldi	r25, 0xEA	; 234
 506:	01 97       	sbiw	r24, 0x01	; 1
 508:	f1 f7       	brne	.-4      	; 0x506 <__EEPROM_REGION_LENGTH__+0x106>
 50a:	00 c0       	rjmp	.+0      	; 0x50c <__EEPROM_REGION_LENGTH__+0x10c>
 50c:	00 00       	nop
							
						}
						
						_delay_ms(1000);
						
						for (brazo = brazo; brazo<=160; brazo++)
 50e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <brazo>
 512:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <brazo+0x1>
 516:	01 96       	adiw	r24, 0x01	; 1
 518:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <brazo+0x1>
 51c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <brazo>
 520:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <brazo>
 524:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <brazo+0x1>
 528:	81 3a       	cpi	r24, 0xA1	; 161
 52a:	91 05       	cpc	r25, r1
 52c:	3c f3       	brlt	.-50     	; 0x4fc <__EEPROM_REGION_LENGTH__+0xfc>
 52e:	9f ef       	ldi	r25, 0xFF	; 255
 530:	23 ed       	ldi	r18, 0xD3	; 211
 532:	80 e3       	ldi	r24, 0x30	; 48
 534:	91 50       	subi	r25, 0x01	; 1
 536:	20 40       	sbci	r18, 0x00	; 0
 538:	80 40       	sbci	r24, 0x00	; 0
 53a:	e1 f7       	brne	.-8      	; 0x534 <__EEPROM_REGION_LENGTH__+0x134>
 53c:	00 c0       	rjmp	.+0      	; 0x53e <__EEPROM_REGION_LENGTH__+0x13e>
 53e:	00 00       	nop
							_delay_ms(15);
							
						}
						
						_delay_ms(1000);
						for (garra = garra; garra<=255; garra++)
 540:	12 c0       	rjmp	.+36     	; 0x566 <__EEPROM_REGION_LENGTH__+0x166>
						{
							convertServo2(garra, channel2A);
 542:	61 e0       	ldi	r22, 0x01	; 1
 544:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <convertServo2>
 548:	8f e5       	ldi	r24, 0x5F	; 95
 54a:	9a ee       	ldi	r25, 0xEA	; 234
 54c:	01 97       	sbiw	r24, 0x01	; 1
 54e:	f1 f7       	brne	.-4      	; 0x54c <__EEPROM_REGION_LENGTH__+0x14c>
 550:	00 c0       	rjmp	.+0      	; 0x552 <__EEPROM_REGION_LENGTH__+0x152>
 552:	00 00       	nop
							_delay_ms(15);
							
						}
						
						_delay_ms(1000);
						for (garra = garra; garra<=255; garra++)
 554:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <garra>
 558:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <garra+0x1>
 55c:	01 96       	adiw	r24, 0x01	; 1
 55e:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <garra+0x1>
 562:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <garra>
 566:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <garra>
 56a:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <garra+0x1>
 56e:	8f 3f       	cpi	r24, 0xFF	; 255
 570:	91 05       	cpc	r25, r1
 572:	39 f3       	breq	.-50     	; 0x542 <__EEPROM_REGION_LENGTH__+0x142>
 574:	34 f3       	brlt	.-52     	; 0x542 <__EEPROM_REGION_LENGTH__+0x142>
 576:	9f ef       	ldi	r25, 0xFF	; 255
 578:	23 ed       	ldi	r18, 0xD3	; 211
 57a:	80 e3       	ldi	r24, 0x30	; 48
 57c:	91 50       	subi	r25, 0x01	; 1
 57e:	20 40       	sbci	r18, 0x00	; 0
 580:	80 40       	sbci	r24, 0x00	; 0
 582:	e1 f7       	brne	.-8      	; 0x57c <__EEPROM_REGION_LENGTH__+0x17c>
 584:	00 c0       	rjmp	.+0      	; 0x586 <__EEPROM_REGION_LENGTH__+0x186>
 586:	00 00       	nop
						}
						
						_delay_ms(1000);
						
							
							for (brazo = brazo; brazo>=80; brazo--)
 588:	12 c0       	rjmp	.+36     	; 0x5ae <__EEPROM_REGION_LENGTH__+0x1ae>
							{
								convertServo(brazo, channelB);
 58a:	62 e0       	ldi	r22, 0x02	; 2
 58c:	0e 94 23 06 	call	0xc46	; 0xc46 <convertServo>
 590:	8f e5       	ldi	r24, 0x5F	; 95
 592:	9a ee       	ldi	r25, 0xEA	; 234
 594:	01 97       	sbiw	r24, 0x01	; 1
 596:	f1 f7       	brne	.-4      	; 0x594 <__EEPROM_REGION_LENGTH__+0x194>
 598:	00 c0       	rjmp	.+0      	; 0x59a <__EEPROM_REGION_LENGTH__+0x19a>
 59a:	00 00       	nop
						}
						
						_delay_ms(1000);
						
							
							for (brazo = brazo; brazo>=80; brazo--)
 59c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <brazo>
 5a0:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <brazo+0x1>
 5a4:	01 97       	sbiw	r24, 0x01	; 1
 5a6:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <brazo+0x1>
 5aa:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <brazo>
 5ae:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <brazo>
 5b2:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <brazo+0x1>
 5b6:	80 35       	cpi	r24, 0x50	; 80
 5b8:	91 05       	cpc	r25, r1
 5ba:	3c f7       	brge	.-50     	; 0x58a <__EEPROM_REGION_LENGTH__+0x18a>
 5bc:	9f ef       	ldi	r25, 0xFF	; 255
 5be:	29 ef       	ldi	r18, 0xF9	; 249
 5c0:	80 e0       	ldi	r24, 0x00	; 0
 5c2:	91 50       	subi	r25, 0x01	; 1
 5c4:	20 40       	sbci	r18, 0x00	; 0
 5c6:	80 40       	sbci	r24, 0x00	; 0
 5c8:	e1 f7       	brne	.-8      	; 0x5c2 <__EEPROM_REGION_LENGTH__+0x1c2>
 5ca:	00 c0       	rjmp	.+0      	; 0x5cc <__EEPROM_REGION_LENGTH__+0x1cc>
 5cc:	00 00       	nop
								_delay_ms(15);
								
							}
							_delay_ms(20);
						
						for (rota = rota; rota>=143; rota--)
 5ce:	12 c0       	rjmp	.+36     	; 0x5f4 <__EEPROM_REGION_LENGTH__+0x1f4>
						{
							convertServo2(rota, channel2B);
 5d0:	62 e0       	ldi	r22, 0x02	; 2
 5d2:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <convertServo2>
 5d6:	8f e5       	ldi	r24, 0x5F	; 95
 5d8:	9a ee       	ldi	r25, 0xEA	; 234
 5da:	01 97       	sbiw	r24, 0x01	; 1
 5dc:	f1 f7       	brne	.-4      	; 0x5da <__EEPROM_REGION_LENGTH__+0x1da>
 5de:	00 c0       	rjmp	.+0      	; 0x5e0 <__EEPROM_REGION_LENGTH__+0x1e0>
 5e0:	00 00       	nop
								_delay_ms(15);
								
							}
							_delay_ms(20);
						
						for (rota = rota; rota>=143; rota--)
 5e2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 5e6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 5ea:	01 97       	sbiw	r24, 0x01	; 1
 5ec:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 5f0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 5f4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 5f8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 5fc:	8f 38       	cpi	r24, 0x8F	; 143
 5fe:	91 05       	cpc	r25, r1
 600:	3c f7       	brge	.-50     	; 0x5d0 <__EEPROM_REGION_LENGTH__+0x1d0>
 602:	9f ef       	ldi	r25, 0xFF	; 255
 604:	29 ef       	ldi	r18, 0xF9	; 249
 606:	80 e0       	ldi	r24, 0x00	; 0
 608:	91 50       	subi	r25, 0x01	; 1
 60a:	20 40       	sbci	r18, 0x00	; 0
 60c:	80 40       	sbci	r24, 0x00	; 0
 60e:	e1 f7       	brne	.-8      	; 0x608 <__EEPROM_REGION_LENGTH__+0x208>
 610:	00 c0       	rjmp	.+0      	; 0x612 <__EEPROM_REGION_LENGTH__+0x212>
 612:	00 00       	nop
							
						}
					
						
						_delay_ms(20);
						for (garra = garra; garra>=50; garra--)
 614:	12 c0       	rjmp	.+36     	; 0x63a <__EEPROM_REGION_LENGTH__+0x23a>
						{
							convertServo2(garra, channel2A);
 616:	61 e0       	ldi	r22, 0x01	; 1
 618:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <convertServo2>
 61c:	8f e5       	ldi	r24, 0x5F	; 95
 61e:	9a ee       	ldi	r25, 0xEA	; 234
 620:	01 97       	sbiw	r24, 0x01	; 1
 622:	f1 f7       	brne	.-4      	; 0x620 <__EEPROM_REGION_LENGTH__+0x220>
 624:	00 c0       	rjmp	.+0      	; 0x626 <__EEPROM_REGION_LENGTH__+0x226>
 626:	00 00       	nop
							
						}
					
						
						_delay_ms(20);
						for (garra = garra; garra>=50; garra--)
 628:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <garra>
 62c:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <garra+0x1>
 630:	01 97       	sbiw	r24, 0x01	; 1
 632:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <garra+0x1>
 636:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <garra>
 63a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <garra>
 63e:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <garra+0x1>
 642:	82 33       	cpi	r24, 0x32	; 50
 644:	91 05       	cpc	r25, r1
 646:	3c f7       	brge	.-50     	; 0x616 <__EEPROM_REGION_LENGTH__+0x216>
 648:	9f ef       	ldi	r25, 0xFF	; 255
 64a:	29 ef       	ldi	r18, 0xF9	; 249
 64c:	80 e0       	ldi	r24, 0x00	; 0
 64e:	91 50       	subi	r25, 0x01	; 1
 650:	20 40       	sbci	r18, 0x00	; 0
 652:	80 40       	sbci	r24, 0x00	; 0
 654:	e1 f7       	brne	.-8      	; 0x64e <__EEPROM_REGION_LENGTH__+0x24e>
 656:	00 c0       	rjmp	.+0      	; 0x658 <__EEPROM_REGION_LENGTH__+0x258>
 658:	00 00       	nop
							
						}
						
						_delay_ms(20);

						for (codo = codo; codo>=180; codo--)
 65a:	12 c0       	rjmp	.+36     	; 0x680 <__EEPROM_REGION_LENGTH__+0x280>
						{
							convertServo(codo,channelA);
 65c:	61 e0       	ldi	r22, 0x01	; 1
 65e:	0e 94 23 06 	call	0xc46	; 0xc46 <convertServo>
 662:	8f e5       	ldi	r24, 0x5F	; 95
 664:	9a ee       	ldi	r25, 0xEA	; 234
 666:	01 97       	sbiw	r24, 0x01	; 1
 668:	f1 f7       	brne	.-4      	; 0x666 <__EEPROM_REGION_LENGTH__+0x266>
 66a:	00 c0       	rjmp	.+0      	; 0x66c <__EEPROM_REGION_LENGTH__+0x26c>
 66c:	00 00       	nop
							
						}
						
						_delay_ms(20);

						for (codo = codo; codo>=180; codo--)
 66e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <codo>
 672:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <codo+0x1>
 676:	01 97       	sbiw	r24, 0x01	; 1
 678:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <codo+0x1>
 67c:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <codo>
 680:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <codo>
 684:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <codo+0x1>
 688:	84 3b       	cpi	r24, 0xB4	; 180
 68a:	91 05       	cpc	r25, r1
 68c:	3c f7       	brge	.-50     	; 0x65c <__EEPROM_REGION_LENGTH__+0x25c>
							
						}

					}
					
					 if (cajas == 1)
 68e:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <cajas>
 692:	81 30       	cpi	r24, 0x01	; 1
 694:	09 f0       	breq	.+2      	; 0x698 <__EEPROM_REGION_LENGTH__+0x298>
 696:	c6 c1       	rjmp	.+908    	; 0xa24 <__stack+0x125>
					{
						
						//Si se colocó caja grande
						    convertServo(80, channelB);
 698:	62 e0       	ldi	r22, 0x02	; 2
 69a:	80 e5       	ldi	r24, 0x50	; 80
 69c:	90 e0       	ldi	r25, 0x00	; 0
 69e:	0e 94 23 06 	call	0xc46	; 0xc46 <convertServo>
 6a2:	9f ef       	ldi	r25, 0xFF	; 255
 6a4:	23 ec       	ldi	r18, 0xC3	; 195
 6a6:	89 e0       	ldi	r24, 0x09	; 9
 6a8:	91 50       	subi	r25, 0x01	; 1
 6aa:	20 40       	sbci	r18, 0x00	; 0
 6ac:	80 40       	sbci	r24, 0x00	; 0
 6ae:	e1 f7       	brne	.-8      	; 0x6a8 <__EEPROM_REGION_LENGTH__+0x2a8>
 6b0:	00 c0       	rjmp	.+0      	; 0x6b2 <__EEPROM_REGION_LENGTH__+0x2b2>
 6b2:	00 00       	nop
						    _delay_ms(200);
							convertServo2(143, channel2B);
 6b4:	62 e0       	ldi	r22, 0x02	; 2
 6b6:	8f e8       	ldi	r24, 0x8F	; 143
 6b8:	90 e0       	ldi	r25, 0x00	; 0
 6ba:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <convertServo2>
 6be:	8f e1       	ldi	r24, 0x1F	; 31
 6c0:	9e e4       	ldi	r25, 0x4E	; 78
 6c2:	01 97       	sbiw	r24, 0x01	; 1
 6c4:	f1 f7       	brne	.-4      	; 0x6c2 <__EEPROM_REGION_LENGTH__+0x2c2>
 6c6:	00 c0       	rjmp	.+0      	; 0x6c8 <__EEPROM_REGION_LENGTH__+0x2c8>
 6c8:	00 00       	nop
							_delay_ms(5);
							convertServo2(50, channel2A);
 6ca:	61 e0       	ldi	r22, 0x01	; 1
 6cc:	82 e3       	ldi	r24, 0x32	; 50
 6ce:	90 e0       	ldi	r25, 0x00	; 0
 6d0:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <convertServo2>
 6d4:	8f e1       	ldi	r24, 0x1F	; 31
 6d6:	9e e4       	ldi	r25, 0x4E	; 78
 6d8:	01 97       	sbiw	r24, 0x01	; 1
 6da:	f1 f7       	brne	.-4      	; 0x6d8 <__EEPROM_REGION_LENGTH__+0x2d8>
 6dc:	00 c0       	rjmp	.+0      	; 0x6de <__EEPROM_REGION_LENGTH__+0x2de>
 6de:	00 00       	nop
							_delay_ms(5);
							convertServo(180,channelA);
 6e0:	61 e0       	ldi	r22, 0x01	; 1
 6e2:	84 eb       	ldi	r24, 0xB4	; 180
 6e4:	90 e0       	ldi	r25, 0x00	; 0
 6e6:	0e 94 23 06 	call	0xc46	; 0xc46 <convertServo>
					
							for (brazo = brazo; brazo>=70; brazo--)
 6ea:	12 c0       	rjmp	.+36     	; 0x710 <__EEPROM_REGION_LENGTH__+0x310>
							{
								convertServo(brazo, channelB);
 6ec:	62 e0       	ldi	r22, 0x02	; 2
 6ee:	0e 94 23 06 	call	0xc46	; 0xc46 <convertServo>
 6f2:	8f e5       	ldi	r24, 0x5F	; 95
 6f4:	9a ee       	ldi	r25, 0xEA	; 234
 6f6:	01 97       	sbiw	r24, 0x01	; 1
 6f8:	f1 f7       	brne	.-4      	; 0x6f6 <__EEPROM_REGION_LENGTH__+0x2f6>
 6fa:	00 c0       	rjmp	.+0      	; 0x6fc <__EEPROM_REGION_LENGTH__+0x2fc>
 6fc:	00 00       	nop
							_delay_ms(5);
							convertServo2(50, channel2A);
							_delay_ms(5);
							convertServo(180,channelA);
					
							for (brazo = brazo; brazo>=70; brazo--)
 6fe:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <brazo>
 702:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <brazo+0x1>
 706:	01 97       	sbiw	r24, 0x01	; 1
 708:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <brazo+0x1>
 70c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <brazo>
 710:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <brazo>
 714:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <brazo+0x1>
 718:	86 34       	cpi	r24, 0x46	; 70
 71a:	91 05       	cpc	r25, r1
 71c:	3c f7       	brge	.-50     	; 0x6ec <__EEPROM_REGION_LENGTH__+0x2ec>
 71e:	9f ef       	ldi	r25, 0xFF	; 255
 720:	29 ef       	ldi	r18, 0xF9	; 249
 722:	80 e0       	ldi	r24, 0x00	; 0
 724:	91 50       	subi	r25, 0x01	; 1
 726:	20 40       	sbci	r18, 0x00	; 0
 728:	80 40       	sbci	r24, 0x00	; 0
 72a:	e1 f7       	brne	.-8      	; 0x724 <__EEPROM_REGION_LENGTH__+0x324>
 72c:	00 c0       	rjmp	.+0      	; 0x72e <__EEPROM_REGION_LENGTH__+0x32e>
 72e:	00 00       	nop
								_delay_ms(15);
								
							}
							
							_delay_ms(20);
							for (garra = garra; garra<=255; garra++)
 730:	12 c0       	rjmp	.+36     	; 0x756 <__EEPROM_REGION_LENGTH__+0x356>
							{
								convertServo2(garra, channel2A);
 732:	61 e0       	ldi	r22, 0x01	; 1
 734:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <convertServo2>
 738:	8f e5       	ldi	r24, 0x5F	; 95
 73a:	9a ee       	ldi	r25, 0xEA	; 234
 73c:	01 97       	sbiw	r24, 0x01	; 1
 73e:	f1 f7       	brne	.-4      	; 0x73c <__EEPROM_REGION_LENGTH__+0x33c>
 740:	00 c0       	rjmp	.+0      	; 0x742 <__EEPROM_REGION_LENGTH__+0x342>
 742:	00 00       	nop
								_delay_ms(15);
								
							}
							
							_delay_ms(20);
							for (garra = garra; garra<=255; garra++)
 744:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <garra>
 748:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <garra+0x1>
 74c:	01 96       	adiw	r24, 0x01	; 1
 74e:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <garra+0x1>
 752:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <garra>
 756:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <garra>
 75a:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <garra+0x1>
 75e:	8f 3f       	cpi	r24, 0xFF	; 255
 760:	91 05       	cpc	r25, r1
 762:	39 f3       	breq	.-50     	; 0x732 <__EEPROM_REGION_LENGTH__+0x332>
 764:	34 f3       	brlt	.-52     	; 0x732 <__EEPROM_REGION_LENGTH__+0x332>
 766:	9f ef       	ldi	r25, 0xFF	; 255
 768:	29 ef       	ldi	r18, 0xF9	; 249
 76a:	80 e0       	ldi	r24, 0x00	; 0
 76c:	91 50       	subi	r25, 0x01	; 1
 76e:	20 40       	sbci	r18, 0x00	; 0
 770:	80 40       	sbci	r24, 0x00	; 0
 772:	e1 f7       	brne	.-8      	; 0x76c <__EEPROM_REGION_LENGTH__+0x36c>
 774:	00 c0       	rjmp	.+0      	; 0x776 <__EEPROM_REGION_LENGTH__+0x376>
 776:	00 00       	nop
								_delay_ms(15);
								
							}
							_delay_ms(20);

							for (codo = codo; codo<=250; codo++)
 778:	12 c0       	rjmp	.+36     	; 0x79e <__EEPROM_REGION_LENGTH__+0x39e>
							{
								convertServo(codo,channelA);
 77a:	61 e0       	ldi	r22, 0x01	; 1
 77c:	0e 94 23 06 	call	0xc46	; 0xc46 <convertServo>
 780:	8f e5       	ldi	r24, 0x5F	; 95
 782:	9a ee       	ldi	r25, 0xEA	; 234
 784:	01 97       	sbiw	r24, 0x01	; 1
 786:	f1 f7       	brne	.-4      	; 0x784 <__EEPROM_REGION_LENGTH__+0x384>
 788:	00 c0       	rjmp	.+0      	; 0x78a <__EEPROM_REGION_LENGTH__+0x38a>
 78a:	00 00       	nop
								_delay_ms(15);
								
							}
							_delay_ms(20);

							for (codo = codo; codo<=250; codo++)
 78c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <codo>
 790:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <codo+0x1>
 794:	01 96       	adiw	r24, 0x01	; 1
 796:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <codo+0x1>
 79a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <codo>
 79e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <codo>
 7a2:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <codo+0x1>
 7a6:	8b 3f       	cpi	r24, 0xFB	; 251
 7a8:	91 05       	cpc	r25, r1
 7aa:	3c f3       	brlt	.-50     	; 0x77a <__EEPROM_REGION_LENGTH__+0x37a>
 7ac:	9f ef       	ldi	r25, 0xFF	; 255
 7ae:	29 ef       	ldi	r18, 0xF9	; 249
 7b0:	80 e0       	ldi	r24, 0x00	; 0
 7b2:	91 50       	subi	r25, 0x01	; 1
 7b4:	20 40       	sbci	r18, 0x00	; 0
 7b6:	80 40       	sbci	r24, 0x00	; 0
 7b8:	e1 f7       	brne	.-8      	; 0x7b2 <__EEPROM_REGION_LENGTH__+0x3b2>
 7ba:	00 c0       	rjmp	.+0      	; 0x7bc <__EEPROM_REGION_LENGTH__+0x3bc>
 7bc:	00 00       	nop
								_delay_ms(15);
								
							}
							
							_delay_ms(20);
							for (garra = garra; garra>=210; garra--)
 7be:	12 c0       	rjmp	.+36     	; 0x7e4 <__EEPROM_REGION_LENGTH__+0x3e4>
							{
								convertServo2(garra, channel2A);
 7c0:	61 e0       	ldi	r22, 0x01	; 1
 7c2:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <convertServo2>
 7c6:	8f e5       	ldi	r24, 0x5F	; 95
 7c8:	9a ee       	ldi	r25, 0xEA	; 234
 7ca:	01 97       	sbiw	r24, 0x01	; 1
 7cc:	f1 f7       	brne	.-4      	; 0x7ca <__EEPROM_REGION_LENGTH__+0x3ca>
 7ce:	00 c0       	rjmp	.+0      	; 0x7d0 <__EEPROM_REGION_LENGTH__+0x3d0>
 7d0:	00 00       	nop
								_delay_ms(15);
								
							}
							
							_delay_ms(20);
							for (garra = garra; garra>=210; garra--)
 7d2:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <garra>
 7d6:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <garra+0x1>
 7da:	01 97       	sbiw	r24, 0x01	; 1
 7dc:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <garra+0x1>
 7e0:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <garra>
 7e4:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <garra>
 7e8:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <garra+0x1>
 7ec:	82 3d       	cpi	r24, 0xD2	; 210
 7ee:	91 05       	cpc	r25, r1
 7f0:	3c f7       	brge	.-50     	; 0x7c0 <__EEPROM_REGION_LENGTH__+0x3c0>
 7f2:	9f ef       	ldi	r25, 0xFF	; 255
 7f4:	23 ef       	ldi	r18, 0xF3	; 243
 7f6:	81 e0       	ldi	r24, 0x01	; 1
 7f8:	91 50       	subi	r25, 0x01	; 1
 7fa:	20 40       	sbci	r18, 0x00	; 0
 7fc:	80 40       	sbci	r24, 0x00	; 0
 7fe:	e1 f7       	brne	.-8      	; 0x7f8 <__EEPROM_REGION_LENGTH__+0x3f8>
 800:	00 c0       	rjmp	.+0      	; 0x802 <__DATA_REGION_LENGTH__+0x2>
 802:	00 00       	nop
								
							}
							
							_delay_ms(40);
							
							for (codo = codo; codo>=200; codo--)
 804:	12 c0       	rjmp	.+36     	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
							{
								convertServo(codo,channelA);
 806:	61 e0       	ldi	r22, 0x01	; 1
 808:	0e 94 23 06 	call	0xc46	; 0xc46 <convertServo>
 80c:	8f e5       	ldi	r24, 0x5F	; 95
 80e:	9a ee       	ldi	r25, 0xEA	; 234
 810:	01 97       	sbiw	r24, 0x01	; 1
 812:	f1 f7       	brne	.-4      	; 0x810 <__DATA_REGION_LENGTH__+0x10>
 814:	00 c0       	rjmp	.+0      	; 0x816 <__DATA_REGION_LENGTH__+0x16>
 816:	00 00       	nop
								
							}
							
							_delay_ms(40);
							
							for (codo = codo; codo>=200; codo--)
 818:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <codo>
 81c:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <codo+0x1>
 820:	01 97       	sbiw	r24, 0x01	; 1
 822:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <codo+0x1>
 826:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <codo>
 82a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <codo>
 82e:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <codo+0x1>
 832:	88 3c       	cpi	r24, 0xC8	; 200
 834:	91 05       	cpc	r25, r1
 836:	3c f7       	brge	.-50     	; 0x806 <__DATA_REGION_LENGTH__+0x6>
 838:	9f ef       	ldi	r25, 0xFF	; 255
 83a:	29 ef       	ldi	r18, 0xF9	; 249
 83c:	80 e0       	ldi	r24, 0x00	; 0
 83e:	91 50       	subi	r25, 0x01	; 1
 840:	20 40       	sbci	r18, 0x00	; 0
 842:	80 40       	sbci	r24, 0x00	; 0
 844:	e1 f7       	brne	.-8      	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
 846:	00 c0       	rjmp	.+0      	; 0x848 <__DATA_REGION_LENGTH__+0x48>
 848:	00 00       	nop
								
							}
							
							_delay_ms(20);
							
							for (rota = rota; rota>=100; rota--)
 84a:	12 c0       	rjmp	.+36     	; 0x870 <__DATA_REGION_LENGTH__+0x70>
							{
								convertServo2(rota, channel2B);
 84c:	62 e0       	ldi	r22, 0x02	; 2
 84e:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <convertServo2>
 852:	8f e5       	ldi	r24, 0x5F	; 95
 854:	9a ee       	ldi	r25, 0xEA	; 234
 856:	01 97       	sbiw	r24, 0x01	; 1
 858:	f1 f7       	brne	.-4      	; 0x856 <__DATA_REGION_LENGTH__+0x56>
 85a:	00 c0       	rjmp	.+0      	; 0x85c <__DATA_REGION_LENGTH__+0x5c>
 85c:	00 00       	nop
								
							}
							
							_delay_ms(20);
							
							for (rota = rota; rota>=100; rota--)
 85e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 862:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 866:	01 97       	sbiw	r24, 0x01	; 1
 868:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 86c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 870:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 874:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 878:	84 36       	cpi	r24, 0x64	; 100
 87a:	91 05       	cpc	r25, r1
 87c:	3c f7       	brge	.-50     	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
 87e:	9f ef       	ldi	r25, 0xFF	; 255
 880:	23 ed       	ldi	r18, 0xD3	; 211
 882:	80 e3       	ldi	r24, 0x30	; 48
 884:	91 50       	subi	r25, 0x01	; 1
 886:	20 40       	sbci	r18, 0x00	; 0
 888:	80 40       	sbci	r24, 0x00	; 0
 88a:	e1 f7       	brne	.-8      	; 0x884 <__DATA_REGION_LENGTH__+0x84>
 88c:	00 c0       	rjmp	.+0      	; 0x88e <__DATA_REGION_LENGTH__+0x8e>
 88e:	00 00       	nop
								
							}
							
							_delay_ms(1000);
							
							for (brazo = brazo; brazo<=150; brazo++)
 890:	12 c0       	rjmp	.+36     	; 0x8b6 <__DATA_REGION_LENGTH__+0xb6>
							{
								convertServo(brazo, channelB);
 892:	62 e0       	ldi	r22, 0x02	; 2
 894:	0e 94 23 06 	call	0xc46	; 0xc46 <convertServo>
 898:	8f e5       	ldi	r24, 0x5F	; 95
 89a:	9a ee       	ldi	r25, 0xEA	; 234
 89c:	01 97       	sbiw	r24, 0x01	; 1
 89e:	f1 f7       	brne	.-4      	; 0x89c <__DATA_REGION_LENGTH__+0x9c>
 8a0:	00 c0       	rjmp	.+0      	; 0x8a2 <__DATA_REGION_LENGTH__+0xa2>
 8a2:	00 00       	nop
								
							}
							
							_delay_ms(1000);
							
							for (brazo = brazo; brazo<=150; brazo++)
 8a4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <brazo>
 8a8:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <brazo+0x1>
 8ac:	01 96       	adiw	r24, 0x01	; 1
 8ae:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <brazo+0x1>
 8b2:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <brazo>
 8b6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <brazo>
 8ba:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <brazo+0x1>
 8be:	87 39       	cpi	r24, 0x97	; 151
 8c0:	91 05       	cpc	r25, r1
 8c2:	3c f3       	brlt	.-50     	; 0x892 <__DATA_REGION_LENGTH__+0x92>
 8c4:	9f ef       	ldi	r25, 0xFF	; 255
 8c6:	23 ed       	ldi	r18, 0xD3	; 211
 8c8:	80 e3       	ldi	r24, 0x30	; 48
 8ca:	91 50       	subi	r25, 0x01	; 1
 8cc:	20 40       	sbci	r18, 0x00	; 0
 8ce:	80 40       	sbci	r24, 0x00	; 0
 8d0:	e1 f7       	brne	.-8      	; 0x8ca <__DATA_REGION_LENGTH__+0xca>
 8d2:	00 c0       	rjmp	.+0      	; 0x8d4 <__DATA_REGION_LENGTH__+0xd4>
 8d4:	00 00       	nop
								_delay_ms(15);
								
							}
							
							_delay_ms(1000);
							for (garra = garra; garra<=255; garra++)
 8d6:	12 c0       	rjmp	.+36     	; 0x8fc <__DATA_REGION_LENGTH__+0xfc>
							{
								convertServo2(garra, channel2A);
 8d8:	61 e0       	ldi	r22, 0x01	; 1
 8da:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <convertServo2>
 8de:	8f e5       	ldi	r24, 0x5F	; 95
 8e0:	9a ee       	ldi	r25, 0xEA	; 234
 8e2:	01 97       	sbiw	r24, 0x01	; 1
 8e4:	f1 f7       	brne	.-4      	; 0x8e2 <__DATA_REGION_LENGTH__+0xe2>
 8e6:	00 c0       	rjmp	.+0      	; 0x8e8 <__DATA_REGION_LENGTH__+0xe8>
 8e8:	00 00       	nop
								_delay_ms(15);
								
							}
							
							_delay_ms(1000);
							for (garra = garra; garra<=255; garra++)
 8ea:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <garra>
 8ee:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <garra+0x1>
 8f2:	01 96       	adiw	r24, 0x01	; 1
 8f4:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <garra+0x1>
 8f8:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <garra>
 8fc:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <garra>
 900:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <garra+0x1>
 904:	8f 3f       	cpi	r24, 0xFF	; 255
 906:	91 05       	cpc	r25, r1
 908:	39 f3       	breq	.-50     	; 0x8d8 <__DATA_REGION_LENGTH__+0xd8>
 90a:	34 f3       	brlt	.-52     	; 0x8d8 <__DATA_REGION_LENGTH__+0xd8>
 90c:	9f ef       	ldi	r25, 0xFF	; 255
 90e:	23 ed       	ldi	r18, 0xD3	; 211
 910:	80 e3       	ldi	r24, 0x30	; 48
 912:	91 50       	subi	r25, 0x01	; 1
 914:	20 40       	sbci	r18, 0x00	; 0
 916:	80 40       	sbci	r24, 0x00	; 0
 918:	e1 f7       	brne	.-8      	; 0x912 <__stack+0x13>
 91a:	00 c0       	rjmp	.+0      	; 0x91c <__stack+0x1d>
 91c:	00 00       	nop
							}
							
							_delay_ms(1000);
							
								
								for (brazo = brazo; brazo>=80; brazo--)
 91e:	12 c0       	rjmp	.+36     	; 0x944 <__stack+0x45>
								{
									convertServo(brazo, channelB);
 920:	62 e0       	ldi	r22, 0x02	; 2
 922:	0e 94 23 06 	call	0xc46	; 0xc46 <convertServo>
 926:	8f e5       	ldi	r24, 0x5F	; 95
 928:	9a ee       	ldi	r25, 0xEA	; 234
 92a:	01 97       	sbiw	r24, 0x01	; 1
 92c:	f1 f7       	brne	.-4      	; 0x92a <__stack+0x2b>
 92e:	00 c0       	rjmp	.+0      	; 0x930 <__stack+0x31>
 930:	00 00       	nop
							}
							
							_delay_ms(1000);
							
								
								for (brazo = brazo; brazo>=80; brazo--)
 932:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <brazo>
 936:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <brazo+0x1>
 93a:	01 97       	sbiw	r24, 0x01	; 1
 93c:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <brazo+0x1>
 940:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <brazo>
 944:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <brazo>
 948:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <brazo+0x1>
 94c:	80 35       	cpi	r24, 0x50	; 80
 94e:	91 05       	cpc	r25, r1
 950:	3c f7       	brge	.-50     	; 0x920 <__stack+0x21>
 952:	9f ef       	ldi	r25, 0xFF	; 255
 954:	29 ef       	ldi	r18, 0xF9	; 249
 956:	80 e0       	ldi	r24, 0x00	; 0
 958:	91 50       	subi	r25, 0x01	; 1
 95a:	20 40       	sbci	r18, 0x00	; 0
 95c:	80 40       	sbci	r24, 0x00	; 0
 95e:	e1 f7       	brne	.-8      	; 0x958 <__stack+0x59>
 960:	00 c0       	rjmp	.+0      	; 0x962 <__stack+0x63>
 962:	00 00       	nop
									_delay_ms(15);
									
								}
								_delay_ms(20);
							
							for (rota = rota; rota<=143; rota++)
 964:	12 c0       	rjmp	.+36     	; 0x98a <__stack+0x8b>
							{
								convertServo2(rota, channel2B);
 966:	62 e0       	ldi	r22, 0x02	; 2
 968:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <convertServo2>
 96c:	8f e5       	ldi	r24, 0x5F	; 95
 96e:	9a ee       	ldi	r25, 0xEA	; 234
 970:	01 97       	sbiw	r24, 0x01	; 1
 972:	f1 f7       	brne	.-4      	; 0x970 <__stack+0x71>
 974:	00 c0       	rjmp	.+0      	; 0x976 <__stack+0x77>
 976:	00 00       	nop
									_delay_ms(15);
									
								}
								_delay_ms(20);
							
							for (rota = rota; rota<=143; rota++)
 978:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 97c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 980:	01 96       	adiw	r24, 0x01	; 1
 982:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 986:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 98a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 98e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 992:	80 39       	cpi	r24, 0x90	; 144
 994:	91 05       	cpc	r25, r1
 996:	3c f3       	brlt	.-50     	; 0x966 <__stack+0x67>
 998:	9f ef       	ldi	r25, 0xFF	; 255
 99a:	29 ef       	ldi	r18, 0xF9	; 249
 99c:	80 e0       	ldi	r24, 0x00	; 0
 99e:	91 50       	subi	r25, 0x01	; 1
 9a0:	20 40       	sbci	r18, 0x00	; 0
 9a2:	80 40       	sbci	r24, 0x00	; 0
 9a4:	e1 f7       	brne	.-8      	; 0x99e <__stack+0x9f>
 9a6:	00 c0       	rjmp	.+0      	; 0x9a8 <__stack+0xa9>
 9a8:	00 00       	nop
								
							}
						
							
							_delay_ms(20);
							for (garra = garra; garra>=50; garra--)
 9aa:	12 c0       	rjmp	.+36     	; 0x9d0 <__stack+0xd1>
							{
								convertServo2(garra, channel2A);
 9ac:	61 e0       	ldi	r22, 0x01	; 1
 9ae:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <convertServo2>
 9b2:	8f e5       	ldi	r24, 0x5F	; 95
 9b4:	9a ee       	ldi	r25, 0xEA	; 234
 9b6:	01 97       	sbiw	r24, 0x01	; 1
 9b8:	f1 f7       	brne	.-4      	; 0x9b6 <__stack+0xb7>
 9ba:	00 c0       	rjmp	.+0      	; 0x9bc <__stack+0xbd>
 9bc:	00 00       	nop
								
							}
						
							
							_delay_ms(20);
							for (garra = garra; garra>=50; garra--)
 9be:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <garra>
 9c2:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <garra+0x1>
 9c6:	01 97       	sbiw	r24, 0x01	; 1
 9c8:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <garra+0x1>
 9cc:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <garra>
 9d0:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <garra>
 9d4:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <garra+0x1>
 9d8:	82 33       	cpi	r24, 0x32	; 50
 9da:	91 05       	cpc	r25, r1
 9dc:	3c f7       	brge	.-50     	; 0x9ac <__stack+0xad>
 9de:	9f ef       	ldi	r25, 0xFF	; 255
 9e0:	29 ef       	ldi	r18, 0xF9	; 249
 9e2:	80 e0       	ldi	r24, 0x00	; 0
 9e4:	91 50       	subi	r25, 0x01	; 1
 9e6:	20 40       	sbci	r18, 0x00	; 0
 9e8:	80 40       	sbci	r24, 0x00	; 0
 9ea:	e1 f7       	brne	.-8      	; 0x9e4 <__stack+0xe5>
 9ec:	00 c0       	rjmp	.+0      	; 0x9ee <__stack+0xef>
 9ee:	00 00       	nop
								
							}
							
							_delay_ms(20);

							for (codo = codo; codo>=180; codo--)
 9f0:	12 c0       	rjmp	.+36     	; 0xa16 <__stack+0x117>
							{
								convertServo(codo,channelA);
 9f2:	61 e0       	ldi	r22, 0x01	; 1
 9f4:	0e 94 23 06 	call	0xc46	; 0xc46 <convertServo>
 9f8:	8f e5       	ldi	r24, 0x5F	; 95
 9fa:	9a ee       	ldi	r25, 0xEA	; 234
 9fc:	01 97       	sbiw	r24, 0x01	; 1
 9fe:	f1 f7       	brne	.-4      	; 0x9fc <__stack+0xfd>
 a00:	00 c0       	rjmp	.+0      	; 0xa02 <__stack+0x103>
 a02:	00 00       	nop
								
							}
							
							_delay_ms(20);

							for (codo = codo; codo>=180; codo--)
 a04:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <codo>
 a08:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <codo+0x1>
 a0c:	01 97       	sbiw	r24, 0x01	; 1
 a0e:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <codo+0x1>
 a12:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <codo>
 a16:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <codo>
 a1a:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <codo+0x1>
 a1e:	84 3b       	cpi	r24, 0xB4	; 180
 a20:	91 05       	cpc	r25, r1
 a22:	3c f7       	brge	.-50     	; 0x9f2 <__stack+0xf3>
								convertServo(codo,channelA);
								_delay_ms(15);
								
							}
					}
					cajas = 9;
 a24:	89 e0       	ldi	r24, 0x09	; 9
 a26:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <cajas>
					activacaja = 0;
 a2a:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <activacaja>
				}		
			} 

			
			
			dato_a_recibirI2C = 0;    //Evitar sumas indebidas
 a2e:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <dato_a_recibirI2C+0x1>
 a32:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <dato_a_recibirI2C>
		}
		
		
		if (sistema_activado == 1)   //Si el sistema se activo con el RTC
 a36:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <sistema_activado>
 a3a:	81 30       	cpi	r24, 0x01	; 1
 a3c:	29 f5       	brne	.+74     	; 0xa88 <__stack+0x189>
		{
			 distance = measureDistance();
 a3e:	0e 94 ef 06 	call	0xdde	; 0xdde <measureDistance>
 a42:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x1>
 a46:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
			 dato_a_enviarI2C = distance;
 a4a:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <dato_a_enviarI2C+0x1>
 a4e:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <dato_a_enviarI2C>
			
			 
			 if (distance <= 3 && activacaja == 0)
 a52:	84 30       	cpi	r24, 0x04	; 4
 a54:	91 05       	cpc	r25, r1
 a56:	48 f4       	brcc	.+18     	; 0xa6a <__stack+0x16b>
 a58:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <activacaja>
 a5c:	21 11       	cpse	r18, r1
 a5e:	05 c0       	rjmp	.+10     	; 0xa6a <__stack+0x16b>
			 {
				 cajas = 1; //Se reconoció caja grande
 a60:	21 e0       	ldi	r18, 0x01	; 1
 a62:	20 93 0d 01 	sts	0x010D, r18	; 0x80010d <cajas>
				 activacaja = 1;
 a66:	20 93 0c 01 	sts	0x010C, r18	; 0x80010c <activacaja>
			 }
			 
			 if (distance <= 6 && distance >=4 && activacaja == 0)
 a6a:	04 97       	sbiw	r24, 0x04	; 4
 a6c:	03 97       	sbiw	r24, 0x03	; 3
 a6e:	38 f4       	brcc	.+14     	; 0xa7e <__stack+0x17f>
 a70:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <activacaja>
 a74:	81 11       	cpse	r24, r1
 a76:	03 c0       	rjmp	.+6      	; 0xa7e <__stack+0x17f>
			 {
				 cajas = 2; //Se reconoció caja pequeña
 a78:	82 e0       	ldi	r24, 0x02	; 2
 a7a:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <cajas>
			
			 }
			 UART_PrintNum(cajas);
 a7e:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <cajas>
 a82:	90 e0       	ldi	r25, 0x00	; 0
 a84:	0e 94 cd 06 	call	0xd9a	; 0xd9a <UART_PrintNum>
	
		}
		
		
		
		convertServo2(garra, channel2A);       //Enviar cada dato a los timers para controlar los servos
 a88:	61 e0       	ldi	r22, 0x01	; 1
 a8a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <garra>
 a8e:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <garra+0x1>
 a92:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <convertServo2>
		convertServo(brazo, channelB);
 a96:	62 e0       	ldi	r22, 0x02	; 2
 a98:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <brazo>
 a9c:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <brazo+0x1>
 aa0:	0e 94 23 06 	call	0xc46	; 0xc46 <convertServo>
		convertServo(codo,channelA);
 aa4:	61 e0       	ldi	r22, 0x01	; 1
 aa6:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <codo>
 aaa:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <codo+0x1>
 aae:	0e 94 23 06 	call	0xc46	; 0xc46 <convertServo>
		convertServo2(rota, channel2B);
 ab2:	62 e0       	ldi	r22, 0x02	; 2
 ab4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 ab8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 abc:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <convertServo2>
 ac0:	8f e5       	ldi	r24, 0x5F	; 95
 ac2:	9a ee       	ldi	r25, 0xEA	; 234
 ac4:	01 97       	sbiw	r24, 0x01	; 1
 ac6:	f1 f7       	brne	.-4      	; 0xac4 <__stack+0x1c5>
 ac8:	00 c0       	rjmp	.+0      	; 0xaca <__stack+0x1cb>
 aca:	00 00       	nop
 acc:	1e cb       	rjmp	.-2500   	; 0x10a <main+0x4>

00000ace <__vector_24>:
		
	}
}


ISR(TWI_vect){           //Vector de interrupción de I2C
 ace:	1f 92       	push	r1
 ad0:	0f 92       	push	r0
 ad2:	0f b6       	in	r0, 0x3f	; 63
 ad4:	0f 92       	push	r0
 ad6:	11 24       	eor	r1, r1
 ad8:	8f 93       	push	r24
 ada:	9f 93       	push	r25
 adc:	ef 93       	push	r30
 ade:	ff 93       	push	r31
	uint8_t estado;
	
	estado = TWSR & 0xFC;  //Lee el estado de la interfaz
 ae0:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 ae4:	8c 7f       	andi	r24, 0xFC	; 252
	
	switch(estado){
 ae6:	80 39       	cpi	r24, 0x90	; 144
 ae8:	d1 f0       	breq	.+52     	; 0xb1e <__vector_24+0x50>
 aea:	40 f4       	brcc	.+16     	; 0xafc <__vector_24+0x2e>
 aec:	80 37       	cpi	r24, 0x70	; 112
 aee:	89 f0       	breq	.+34     	; 0xb12 <__vector_24+0x44>
 af0:	80 38       	cpi	r24, 0x80	; 128
 af2:	a9 f0       	breq	.+42     	; 0xb1e <__vector_24+0x50>
 af4:	80 36       	cpi	r24, 0x60	; 96
 af6:	09 f0       	breq	.+2      	; 0xafa <__vector_24+0x2c>
 af8:	3f c0       	rjmp	.+126    	; 0xb78 <__vector_24+0xaa>
 afa:	0b c0       	rjmp	.+22     	; 0xb12 <__vector_24+0x44>
 afc:	88 3b       	cpi	r24, 0xB8	; 184
 afe:	69 f1       	breq	.+90     	; 0xb5a <__vector_24+0x8c>
 b00:	18 f4       	brcc	.+6      	; 0xb08 <__vector_24+0x3a>
 b02:	88 3a       	cpi	r24, 0xA8	; 168
 b04:	51 f1       	breq	.+84     	; 0xb5a <__vector_24+0x8c>
 b06:	38 c0       	rjmp	.+112    	; 0xb78 <__vector_24+0xaa>
 b08:	80 3c       	cpi	r24, 0xC0	; 192
 b0a:	81 f1       	breq	.+96     	; 0xb6c <__vector_24+0x9e>
 b0c:	88 3c       	cpi	r24, 0xC8	; 200
 b0e:	71 f1       	breq	.+92     	; 0xb6c <__vector_24+0x9e>
 b10:	33 c0       	rjmp	.+102    	; 0xb78 <__vector_24+0xaa>
		case 0x60:
		case 0x70:              //Direccionado con su direccion de esclavo
		TWCR |= (1 << TWINT); //
 b12:	ec eb       	ldi	r30, 0xBC	; 188
 b14:	f0 e0       	ldi	r31, 0x00	; 0
 b16:	80 81       	ld	r24, Z
 b18:	80 68       	ori	r24, 0x80	; 128
 b1a:	80 83       	st	Z, r24
		break;
 b1c:	32 c0       	rjmp	.+100    	; 0xb82 <__vector_24+0xb4>
		
		case 0x80:
		case 0x90:
		dato_a_recibirI2C = TWDR;  //Recibió el dato, llamada general
 b1e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 b22:	90 e0       	ldi	r25, 0x00	; 0
 b24:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <dato_a_recibirI2C+0x1>
 b28:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <dato_a_recibirI2C>
		TWCR |= 1 << TWINT; //Borra la bandera TWINT
 b2c:	ec eb       	ldi	r30, 0xBC	; 188
 b2e:	f0 e0       	ldi	r31, 0x00	; 0
 b30:	80 81       	ld	r24, Z
 b32:	80 68       	ori	r24, 0x80	; 128
 b34:	80 83       	st	Z, r24
		if (dato_a_recibirI2C == 20)   //Si se detecto gas
 b36:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <dato_a_recibirI2C>
 b3a:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <dato_a_recibirI2C+0x1>
 b3e:	44 97       	sbiw	r24, 0x14	; 20
 b40:	01 f5       	brne	.+64     	; 0xb82 <__vector_24+0xb4>
		{
			dato_a_enviarI2C = 1;
 b42:	81 e0       	ldi	r24, 0x01	; 1
 b44:	90 e0       	ldi	r25, 0x00	; 0
 b46:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <dato_a_enviarI2C+0x1>
 b4a:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <dato_a_enviarI2C>
			sistema_activado = 0;
 b4e:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <sistema_activado>
			PORTB &= ~(1 << PORTB4);  // Apaga PB4
 b52:	85 b1       	in	r24, 0x05	; 5
 b54:	8f 7e       	andi	r24, 0xEF	; 239
 b56:	85 b9       	out	0x05, r24	; 5
 b58:	14 c0       	rjmp	.+40     	; 0xb82 <__vector_24+0xb4>
		}
		break;
		
		case 0xA8: // SLA+R recibido, maestro solicita lectura
		case 0xB8: // Dato transmitido y ACK recibido
		TWDR = dato_a_enviarI2C; // Cargar el dato en el registro de datos*****************
 b5a:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <dato_a_enviarI2C>
 b5e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
		TWCR |= (1 << TWINT) | (1 << TWEN) | (1 << TWIE)| (1 << TWEA); // Listo para la próxima operación
 b62:	ec eb       	ldi	r30, 0xBC	; 188
 b64:	f0 e0       	ldi	r31, 0x00	; 0
 b66:	80 81       	ld	r24, Z
 b68:	85 6c       	ori	r24, 0xC5	; 197
 b6a:	80 83       	st	Z, r24
		
		case 0xC0: // Dato transmitido y NACK recibido
		case 0xC8: // Último dato transmitido y ACK recibido
		TWCR |= (1 << TWINT) | (1 << TWEN) | (1 << TWEA); // Listo para la próxima operación
 b6c:	ec eb       	ldi	r30, 0xBC	; 188
 b6e:	f0 e0       	ldi	r31, 0x00	; 0
 b70:	80 81       	ld	r24, Z
 b72:	84 6c       	ori	r24, 0xC4	; 196
 b74:	80 83       	st	Z, r24
		break;
 b76:	05 c0       	rjmp	.+10     	; 0xb82 <__vector_24+0xb4>
		
		default:    //Libera el BUS de cualquier errror
		TWCR |= (1 << TWINT) | (1 << TWSTO);
 b78:	ec eb       	ldi	r30, 0xBC	; 188
 b7a:	f0 e0       	ldi	r31, 0x00	; 0
 b7c:	80 81       	ld	r24, Z
 b7e:	80 69       	ori	r24, 0x90	; 144
 b80:	80 83       	st	Z, r24
		
	}
	
}
 b82:	ff 91       	pop	r31
 b84:	ef 91       	pop	r30
 b86:	9f 91       	pop	r25
 b88:	8f 91       	pop	r24
 b8a:	0f 90       	pop	r0
 b8c:	0f be       	out	0x3f, r0	; 63
 b8e:	0f 90       	pop	r0
 b90:	1f 90       	pop	r1
 b92:	18 95       	reti

00000b94 <channel>:
uint16_t topVal = 1;
uint16_t i, j;


void channel(uint8_t setChannel, uint8_t inverted){
	switch(setChannel){
 b94:	81 30       	cpi	r24, 0x01	; 1
 b96:	19 f0       	breq	.+6      	; 0xb9e <channel+0xa>
 b98:	82 30       	cpi	r24, 0x02	; 2
 b9a:	79 f0       	breq	.+30     	; 0xbba <channel+0x26>
 b9c:	08 95       	ret
		case 1:
		if(inverted == 1){
 b9e:	61 30       	cpi	r22, 0x01	; 1
 ba0:	31 f4       	brne	.+12     	; 0xbae <channel+0x1a>
			TCCR1A |= (1 << COM1A0) | (1 << COM1A1);	//A invertido
 ba2:	e0 e8       	ldi	r30, 0x80	; 128
 ba4:	f0 e0       	ldi	r31, 0x00	; 0
 ba6:	80 81       	ld	r24, Z
 ba8:	80 6c       	ori	r24, 0xC0	; 192
 baa:	80 83       	st	Z, r24
 bac:	08 95       	ret
			}else{
			TCCR1A |= (1 << COM1A1);					//A no invertido
 bae:	e0 e8       	ldi	r30, 0x80	; 128
 bb0:	f0 e0       	ldi	r31, 0x00	; 0
 bb2:	80 81       	ld	r24, Z
 bb4:	80 68       	ori	r24, 0x80	; 128
 bb6:	80 83       	st	Z, r24
 bb8:	08 95       	ret
		}
		break;
		
		case 2:
		if(inverted == 1){
 bba:	61 30       	cpi	r22, 0x01	; 1
 bbc:	31 f4       	brne	.+12     	; 0xbca <channel+0x36>
			TCCR1A |= (1 << COM1B0) | (1 << COM1B1);	//B invertido
 bbe:	e0 e8       	ldi	r30, 0x80	; 128
 bc0:	f0 e0       	ldi	r31, 0x00	; 0
 bc2:	80 81       	ld	r24, Z
 bc4:	80 63       	ori	r24, 0x30	; 48
 bc6:	80 83       	st	Z, r24
 bc8:	08 95       	ret
			}else{
			TCCR1A |= (1 << COM1B1);					//B no invertido
 bca:	e0 e8       	ldi	r30, 0x80	; 128
 bcc:	f0 e0       	ldi	r31, 0x00	; 0
 bce:	80 81       	ld	r24, Z
 bd0:	80 62       	ori	r24, 0x20	; 32
 bd2:	80 83       	st	Z, r24
 bd4:	08 95       	ret

00000bd6 <initFastPWM1>:
}


void initFastPWM1(uint16_t prescaler){
	//initialize register timer1
	TCCR1A = 0;
 bd6:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = 0;
 bda:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	
	switch (prescaler)
 bde:	88 30       	cpi	r24, 0x08	; 8
 be0:	91 05       	cpc	r25, r1
 be2:	21 f0       	breq	.+8      	; 0xbec <initFastPWM1+0x16>
 be4:	81 15       	cp	r24, r1
 be6:	94 40       	sbci	r25, 0x04	; 4
 be8:	39 f0       	breq	.+14     	; 0xbf8 <initFastPWM1+0x22>
 bea:	0b c0       	rjmp	.+22     	; 0xc02 <initFastPWM1+0x2c>
	{
		case 8:
		TCCR1B |= (1 << CS11);					//prescaler 8
 bec:	e1 e8       	ldi	r30, 0x81	; 129
 bee:	f0 e0       	ldi	r31, 0x00	; 0
 bf0:	80 81       	ld	r24, Z
 bf2:	82 60       	ori	r24, 0x02	; 2
 bf4:	80 83       	st	Z, r24
		break;
 bf6:	05 c0       	rjmp	.+10     	; 0xc02 <initFastPWM1+0x2c>
		
		case 1024:
		TCCR1B |= (1 << CS10) | (1 << CS12);	//prescaler 1024
 bf8:	e1 e8       	ldi	r30, 0x81	; 129
 bfa:	f0 e0       	ldi	r31, 0x00	; 0
 bfc:	80 81       	ld	r24, Z
 bfe:	85 60       	ori	r24, 0x05	; 5
 c00:	80 83       	st	Z, r24
		break;
	}
	
	
	TCCR1A |= (1 << WGM11);
 c02:	e0 e8       	ldi	r30, 0x80	; 128
 c04:	f0 e0       	ldi	r31, 0x00	; 0
 c06:	80 81       	ld	r24, Z
 c08:	82 60       	ori	r24, 0x02	; 2
 c0a:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM12) | (1 << WGM13);
 c0c:	e1 e8       	ldi	r30, 0x81	; 129
 c0e:	f0 e0       	ldi	r31, 0x00	; 0
 c10:	80 81       	ld	r24, Z
 c12:	88 61       	ori	r24, 0x18	; 24
 c14:	80 83       	st	Z, r24
	topVal = 1;
 c16:	81 e0       	ldi	r24, 0x01	; 1
 c18:	90 e0       	ldi	r25, 0x00	; 0
 c1a:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <topVal+0x1>
 c1e:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <topVal>
 c22:	08 95       	ret

00000c24 <topValue>:
	
}


void topValue(uint16_t top){
	if (topVal == 1)	{
 c24:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <topVal>
 c28:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <topVal+0x1>
 c2c:	21 30       	cpi	r18, 0x01	; 1
 c2e:	31 05       	cpc	r19, r1
 c30:	29 f4       	brne	.+10     	; 0xc3c <topValue+0x18>
		ICR1 = top;		//Poner el valor maximo de llegada en ICR1
 c32:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 c36:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
 c3a:	08 95       	ret
	}
	else{
		topVal = 0;
 c3c:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <topVal+0x1>
 c40:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <topVal>
 c44:	08 95       	ret

00000c46 <convertServo>:
}


void convertServo(uint16_t analogIn, uint8_t selChannel){   //Conversion para servos
	
	switch(selChannel){
 c46:	61 30       	cpi	r22, 0x01	; 1
 c48:	19 f0       	breq	.+6      	; 0xc50 <convertServo+0xa>
 c4a:	62 30       	cpi	r22, 0x02	; 2
 c4c:	b1 f0       	breq	.+44     	; 0xc7a <convertServo+0x34>
 c4e:	08 95       	ret
		case 1:
		i = analogIn;
 c50:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <i+0x1>
 c54:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <i>
		j = (200/12)*i+1000;
 c58:	82 95       	swap	r24
 c5a:	92 95       	swap	r25
 c5c:	90 7f       	andi	r25, 0xF0	; 240
 c5e:	98 27       	eor	r25, r24
 c60:	80 7f       	andi	r24, 0xF0	; 240
 c62:	98 27       	eor	r25, r24
 c64:	88 51       	subi	r24, 0x18	; 24
 c66:	9c 4f       	sbci	r25, 0xFC	; 252
 c68:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <j+0x1>
 c6c:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <j>
		OCR1A = j;
 c70:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 c74:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		break;
 c78:	08 95       	ret
		
		case 2:
		i = analogIn;
 c7a:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <i+0x1>
 c7e:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <i>
		j = (200/12)*i+1000;
 c82:	82 95       	swap	r24
 c84:	92 95       	swap	r25
 c86:	90 7f       	andi	r25, 0xF0	; 240
 c88:	98 27       	eor	r25, r24
 c8a:	80 7f       	andi	r24, 0xF0	; 240
 c8c:	98 27       	eor	r25, r24
 c8e:	88 51       	subi	r24, 0x18	; 24
 c90:	9c 4f       	sbci	r25, 0xFC	; 252
 c92:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <j+0x1>
 c96:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <j>
		OCR1B = j;
 c9a:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 c9e:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 ca2:	08 95       	ret

00000ca4 <initFastPWM2>:

int P, a;
uint8_t suma = 0;

void initFastPWM2(){
	TCCR2A = 0;
 ca4:	e0 eb       	ldi	r30, 0xB0	; 176
 ca6:	f0 e0       	ldi	r31, 0x00	; 0
 ca8:	10 82       	st	Z, r1
	TCCR2B = 0;
 caa:	a1 eb       	ldi	r26, 0xB1	; 177
 cac:	b0 e0       	ldi	r27, 0x00	; 0
 cae:	1c 92       	st	X, r1
	
	TCCR2A |= (1<<COM2A1);	//  OC2A NO INVERTIDO
 cb0:	80 81       	ld	r24, Z
 cb2:	80 68       	ori	r24, 0x80	; 128
 cb4:	80 83       	st	Z, r24
	TCCR2A |= (1<<COM2B1);	//  OC2A NO INVERTIDO
 cb6:	80 81       	ld	r24, Z
 cb8:	80 62       	ori	r24, 0x20	; 32
 cba:	80 83       	st	Z, r24
	
	TCCR2A |= (1<<WGM21)|(1<<WGM20)|(1<<WGM22);	//Fast mode
 cbc:	80 81       	ld	r24, Z
 cbe:	8b 60       	ori	r24, 0x0B	; 11
 cc0:	80 83       	st	Z, r24
	TCCR2B &= ~(1<<WGM22);
 cc2:	8c 91       	ld	r24, X
 cc4:	87 7f       	andi	r24, 0xF7	; 247
 cc6:	8c 93       	st	X, r24
	
	TCCR2B |= (1<<CS22)|(1<<CS21)|(1<<CS20);//Prescaler 1024
 cc8:	8c 91       	ld	r24, X
 cca:	87 60       	ori	r24, 0x07	; 7
 ccc:	8c 93       	st	X, r24
	OCR2A = 7;
 cce:	87 e0       	ldi	r24, 0x07	; 7
 cd0:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
	OCR0B = 0;
 cd4:	18 bc       	out	0x28, r1	; 40
 cd6:	08 95       	ret

00000cd8 <convertServo2>:
}


void convertServo2(uint16_t analogIn2, uint8_t selChannel2){   //Conversion para servos
	
	switch(selChannel2){
 cd8:	61 30       	cpi	r22, 0x01	; 1
 cda:	19 f0       	breq	.+6      	; 0xce2 <convertServo2+0xa>
 cdc:	62 30       	cpi	r22, 0x02	; 2
 cde:	c9 f0       	breq	.+50     	; 0xd12 <convertServo2+0x3a>
 ce0:	08 95       	ret
		case 1:
		P = analogIn2;
 ce2:	90 93 1a 01 	sts	0x011A, r25	; 0x80011a <P+0x1>
 ce6:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <P>
		
		a = (((P)*(28-7))/(255))+7;     //Recreando la funcion de arduino de map(ADCH,0,255,7,38)
 cea:	45 e1       	ldi	r20, 0x15	; 21
 cec:	48 9f       	mul	r20, r24
 cee:	90 01       	movw	r18, r0
 cf0:	49 9f       	mul	r20, r25
 cf2:	30 0d       	add	r19, r0
 cf4:	11 24       	eor	r1, r1
 cf6:	c9 01       	movw	r24, r18
 cf8:	6f ef       	ldi	r22, 0xFF	; 255
 cfa:	70 e0       	ldi	r23, 0x00	; 0
 cfc:	0e 94 19 07 	call	0xe32	; 0xe32 <__divmodhi4>
 d00:	69 5f       	subi	r22, 0xF9	; 249
 d02:	7f 4f       	sbci	r23, 0xFF	; 255
 d04:	70 93 18 01 	sts	0x0118, r23	; 0x800118 <a+0x1>
 d08:	60 93 17 01 	sts	0x0117, r22	; 0x800117 <a>
		OCR2A = a;
 d0c:	60 93 b3 00 	sts	0x00B3, r22	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
		
		break;
 d10:	08 95       	ret
		
		case 2:
		P = analogIn2;
 d12:	90 93 1a 01 	sts	0x011A, r25	; 0x80011a <P+0x1>
 d16:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <P>
		a = (((P)*(38-7))/(255))+7;
 d1a:	4f e1       	ldi	r20, 0x1F	; 31
 d1c:	48 9f       	mul	r20, r24
 d1e:	90 01       	movw	r18, r0
 d20:	49 9f       	mul	r20, r25
 d22:	30 0d       	add	r19, r0
 d24:	11 24       	eor	r1, r1
 d26:	c9 01       	movw	r24, r18
 d28:	6f ef       	ldi	r22, 0xFF	; 255
 d2a:	70 e0       	ldi	r23, 0x00	; 0
 d2c:	0e 94 19 07 	call	0xe32	; 0xe32 <__divmodhi4>
 d30:	69 5f       	subi	r22, 0xF9	; 249
 d32:	7f 4f       	sbci	r23, 0xFF	; 255
 d34:	70 93 18 01 	sts	0x0118, r23	; 0x800118 <a+0x1>
 d38:	60 93 17 01 	sts	0x0117, r22	; 0x800117 <a>
		OCR2B = a;
 d3c:	60 93 b4 00 	sts	0x00B4, r22	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
 d40:	08 95       	ret

00000d42 <initUART9600>:

//Funcion de escritura de un caracter
void writeUART(char Caracter)
{
	while(!(UCSR0A & (1<<UDRE0)));  //hasta que la bandera este en 1
	UDR0 = Caracter;
 d42:	8a b1       	in	r24, 0x0a	; 10
 d44:	8e 7f       	andi	r24, 0xFE	; 254
 d46:	8a b9       	out	0x0a, r24	; 10
 d48:	8a b1       	in	r24, 0x0a	; 10
 d4a:	82 60       	ori	r24, 0x02	; 2
 d4c:	8a b9       	out	0x0a, r24	; 10
 d4e:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 d52:	e1 ec       	ldi	r30, 0xC1	; 193
 d54:	f0 e0       	ldi	r31, 0x00	; 0
 d56:	10 82       	st	Z, r1
 d58:	80 81       	ld	r24, Z
 d5a:	88 69       	ori	r24, 0x98	; 152
 d5c:	80 83       	st	Z, r24
 d5e:	e2 ec       	ldi	r30, 0xC2	; 194
 d60:	f0 e0       	ldi	r31, 0x00	; 0
 d62:	10 82       	st	Z, r1
 d64:	80 81       	ld	r24, Z
 d66:	86 60       	ori	r24, 0x06	; 6
 d68:	80 83       	st	Z, r24
 d6a:	87 e6       	ldi	r24, 0x67	; 103
 d6c:	90 e0       	ldi	r25, 0x00	; 0
 d6e:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 d72:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 d76:	08 95       	ret

00000d78 <writeTextUART>:
 d78:	ac 01       	movw	r20, r24
 d7a:	20 e0       	ldi	r18, 0x00	; 0
 d7c:	07 c0       	rjmp	.+14     	; 0xd8c <writeTextUART+0x14>
 d7e:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 d82:	95 ff       	sbrs	r25, 5
 d84:	fc cf       	rjmp	.-8      	; 0xd7e <writeTextUART+0x6>
 d86:	30 93 c6 00 	sts	0x00C6, r19	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 d8a:	2f 5f       	subi	r18, 0xFF	; 255
 d8c:	fa 01       	movw	r30, r20
 d8e:	e2 0f       	add	r30, r18
 d90:	f1 1d       	adc	r31, r1
 d92:	30 81       	ld	r19, Z
 d94:	31 11       	cpse	r19, r1
 d96:	f3 cf       	rjmp	.-26     	; 0xd7e <writeTextUART+0x6>
 d98:	08 95       	ret

00000d9a <UART_PrintNum>:
	
}

void UART_PrintNum(uint16_t num) {
 d9a:	cf 93       	push	r28
 d9c:	df 93       	push	r29
 d9e:	00 d0       	rcall	.+0      	; 0xda0 <UART_PrintNum+0x6>
 da0:	00 d0       	rcall	.+0      	; 0xda2 <UART_PrintNum+0x8>
 da2:	00 d0       	rcall	.+0      	; 0xda4 <UART_PrintNum+0xa>
 da4:	cd b7       	in	r28, 0x3d	; 61
 da6:	de b7       	in	r29, 0x3e	; 62
	char buffer[6];
	itoa(num, buffer, 10);
 da8:	4a e0       	ldi	r20, 0x0A	; 10
 daa:	50 e0       	ldi	r21, 0x00	; 0
 dac:	be 01       	movw	r22, r28
 dae:	6f 5f       	subi	r22, 0xFF	; 255
 db0:	7f 4f       	sbci	r23, 0xFF	; 255
 db2:	0e 94 50 07 	call	0xea0	; 0xea0 <itoa>
	writeTextUART(buffer);
 db6:	ce 01       	movw	r24, r28
 db8:	01 96       	adiw	r24, 0x01	; 1
 dba:	0e 94 bc 06 	call	0xd78	; 0xd78 <writeTextUART>
}
 dbe:	26 96       	adiw	r28, 0x06	; 6
 dc0:	0f b6       	in	r0, 0x3f	; 63
 dc2:	f8 94       	cli
 dc4:	de bf       	out	0x3e, r29	; 62
 dc6:	0f be       	out	0x3f, r0	; 63
 dc8:	cd bf       	out	0x3d, r28	; 61
 dca:	df 91       	pop	r29
 dcc:	cf 91       	pop	r28
 dce:	08 95       	ret

00000dd0 <initUltrasonic>:
#include "Ultrasonico.h"

void initUltrasonic() {
	DDRD |= (1<<PIND6);  // TRIG como salida
 dd0:	8a b1       	in	r24, 0x0a	; 10
 dd2:	80 64       	ori	r24, 0x40	; 64
 dd4:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~(1<<PIND7); // ECHO como entrada
 dd6:	8a b1       	in	r24, 0x0a	; 10
 dd8:	8f 77       	andi	r24, 0x7F	; 127
 dda:	8a b9       	out	0x0a, r24	; 10
 ddc:	08 95       	ret

00000dde <measureDistance>:



uint16_t measureDistance() {
	// Enviar un pulso de 10us en TRIG
	PORTD &= ~(1<<PIND6);
 dde:	8b b1       	in	r24, 0x0b	; 11
 de0:	8f 7b       	andi	r24, 0xBF	; 191
 de2:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 de4:	8a e0       	ldi	r24, 0x0A	; 10
 de6:	8a 95       	dec	r24
 de8:	f1 f7       	brne	.-4      	; 0xde6 <measureDistance+0x8>
 dea:	00 c0       	rjmp	.+0      	; 0xdec <measureDistance+0xe>
	_delay_us(2);
	PORTD |= (1<<PIND6);
 dec:	8b b1       	in	r24, 0x0b	; 11
 dee:	80 64       	ori	r24, 0x40	; 64
 df0:	8b b9       	out	0x0b, r24	; 11
 df2:	85 e3       	ldi	r24, 0x35	; 53
 df4:	8a 95       	dec	r24
 df6:	f1 f7       	brne	.-4      	; 0xdf4 <measureDistance+0x16>
 df8:	00 00       	nop
	_delay_us(10);
	PORTD &= ~(1<<PIND6);
 dfa:	8b b1       	in	r24, 0x0b	; 11
 dfc:	8f 7b       	andi	r24, 0xBF	; 191
 dfe:	8b b9       	out	0x0b, r24	; 11
	
	// Esperar por el pulso en ECHO
	while (!(PIND & (1<<PIND7)));
 e00:	4f 9b       	sbis	0x09, 7	; 9
 e02:	fe cf       	rjmp	.-4      	; 0xe00 <measureDistance+0x22>
 e04:	20 e0       	ldi	r18, 0x00	; 0
 e06:	30 e0       	ldi	r19, 0x00	; 0
 e08:	06 c0       	rjmp	.+12     	; 0xe16 <measureDistance+0x38>
	
	// Medir el ancho del pulso
	uint16_t count = 0;
	while (PIND & (1<<PIND7)) {
		count++;
 e0a:	2f 5f       	subi	r18, 0xFF	; 255
 e0c:	3f 4f       	sbci	r19, 0xFF	; 255
 e0e:	85 e0       	ldi	r24, 0x05	; 5
 e10:	8a 95       	dec	r24
 e12:	f1 f7       	brne	.-4      	; 0xe10 <measureDistance+0x32>
 e14:	00 00       	nop
	// Esperar por el pulso en ECHO
	while (!(PIND & (1<<PIND7)));
	
	// Medir el ancho del pulso
	uint16_t count = 0;
	while (PIND & (1<<PIND7)) {
 e16:	4f 99       	sbic	0x09, 7	; 9
 e18:	f8 cf       	rjmp	.-16     	; 0xe0a <measureDistance+0x2c>
		count++;
		_delay_us(1);
	}
	
	// Convertir el tiempo a distancia
	return (count / 58)+1;  // La constante 58 depende de la velocidad del sonido
 e1a:	af e9       	ldi	r26, 0x9F	; 159
 e1c:	b6 e4       	ldi	r27, 0x46	; 70
 e1e:	0e 94 2d 07 	call	0xe5a	; 0xe5a <__umulhisi3>
 e22:	92 95       	swap	r25
 e24:	82 95       	swap	r24
 e26:	8f 70       	andi	r24, 0x0F	; 15
 e28:	89 27       	eor	r24, r25
 e2a:	9f 70       	andi	r25, 0x0F	; 15
 e2c:	89 27       	eor	r24, r25
 e2e:	01 96       	adiw	r24, 0x01	; 1
 e30:	08 95       	ret

00000e32 <__divmodhi4>:
 e32:	97 fb       	bst	r25, 7
 e34:	07 2e       	mov	r0, r23
 e36:	16 f4       	brtc	.+4      	; 0xe3c <__divmodhi4+0xa>
 e38:	00 94       	com	r0
 e3a:	07 d0       	rcall	.+14     	; 0xe4a <__divmodhi4_neg1>
 e3c:	77 fd       	sbrc	r23, 7
 e3e:	09 d0       	rcall	.+18     	; 0xe52 <__divmodhi4_neg2>
 e40:	0e 94 3c 07 	call	0xe78	; 0xe78 <__udivmodhi4>
 e44:	07 fc       	sbrc	r0, 7
 e46:	05 d0       	rcall	.+10     	; 0xe52 <__divmodhi4_neg2>
 e48:	3e f4       	brtc	.+14     	; 0xe58 <__divmodhi4_exit>

00000e4a <__divmodhi4_neg1>:
 e4a:	90 95       	com	r25
 e4c:	81 95       	neg	r24
 e4e:	9f 4f       	sbci	r25, 0xFF	; 255
 e50:	08 95       	ret

00000e52 <__divmodhi4_neg2>:
 e52:	70 95       	com	r23
 e54:	61 95       	neg	r22
 e56:	7f 4f       	sbci	r23, 0xFF	; 255

00000e58 <__divmodhi4_exit>:
 e58:	08 95       	ret

00000e5a <__umulhisi3>:
 e5a:	a2 9f       	mul	r26, r18
 e5c:	b0 01       	movw	r22, r0
 e5e:	b3 9f       	mul	r27, r19
 e60:	c0 01       	movw	r24, r0
 e62:	a3 9f       	mul	r26, r19
 e64:	70 0d       	add	r23, r0
 e66:	81 1d       	adc	r24, r1
 e68:	11 24       	eor	r1, r1
 e6a:	91 1d       	adc	r25, r1
 e6c:	b2 9f       	mul	r27, r18
 e6e:	70 0d       	add	r23, r0
 e70:	81 1d       	adc	r24, r1
 e72:	11 24       	eor	r1, r1
 e74:	91 1d       	adc	r25, r1
 e76:	08 95       	ret

00000e78 <__udivmodhi4>:
 e78:	aa 1b       	sub	r26, r26
 e7a:	bb 1b       	sub	r27, r27
 e7c:	51 e1       	ldi	r21, 0x11	; 17
 e7e:	07 c0       	rjmp	.+14     	; 0xe8e <__udivmodhi4_ep>

00000e80 <__udivmodhi4_loop>:
 e80:	aa 1f       	adc	r26, r26
 e82:	bb 1f       	adc	r27, r27
 e84:	a6 17       	cp	r26, r22
 e86:	b7 07       	cpc	r27, r23
 e88:	10 f0       	brcs	.+4      	; 0xe8e <__udivmodhi4_ep>
 e8a:	a6 1b       	sub	r26, r22
 e8c:	b7 0b       	sbc	r27, r23

00000e8e <__udivmodhi4_ep>:
 e8e:	88 1f       	adc	r24, r24
 e90:	99 1f       	adc	r25, r25
 e92:	5a 95       	dec	r21
 e94:	a9 f7       	brne	.-22     	; 0xe80 <__udivmodhi4_loop>
 e96:	80 95       	com	r24
 e98:	90 95       	com	r25
 e9a:	bc 01       	movw	r22, r24
 e9c:	cd 01       	movw	r24, r26
 e9e:	08 95       	ret

00000ea0 <itoa>:
 ea0:	45 32       	cpi	r20, 0x25	; 37
 ea2:	51 05       	cpc	r21, r1
 ea4:	20 f4       	brcc	.+8      	; 0xeae <itoa+0xe>
 ea6:	42 30       	cpi	r20, 0x02	; 2
 ea8:	10 f0       	brcs	.+4      	; 0xeae <itoa+0xe>
 eaa:	0c 94 5b 07 	jmp	0xeb6	; 0xeb6 <__itoa_ncheck>
 eae:	fb 01       	movw	r30, r22
 eb0:	10 82       	st	Z, r1
 eb2:	cb 01       	movw	r24, r22
 eb4:	08 95       	ret

00000eb6 <__itoa_ncheck>:
 eb6:	bb 27       	eor	r27, r27
 eb8:	4a 30       	cpi	r20, 0x0A	; 10
 eba:	31 f4       	brne	.+12     	; 0xec8 <__itoa_ncheck+0x12>
 ebc:	99 23       	and	r25, r25
 ebe:	22 f4       	brpl	.+8      	; 0xec8 <__itoa_ncheck+0x12>
 ec0:	bd e2       	ldi	r27, 0x2D	; 45
 ec2:	90 95       	com	r25
 ec4:	81 95       	neg	r24
 ec6:	9f 4f       	sbci	r25, 0xFF	; 255
 ec8:	0c 94 67 07 	jmp	0xece	; 0xece <__utoa_common>

00000ecc <__utoa_ncheck>:
 ecc:	bb 27       	eor	r27, r27

00000ece <__utoa_common>:
 ece:	fb 01       	movw	r30, r22
 ed0:	55 27       	eor	r21, r21
 ed2:	aa 27       	eor	r26, r26
 ed4:	88 0f       	add	r24, r24
 ed6:	99 1f       	adc	r25, r25
 ed8:	aa 1f       	adc	r26, r26
 eda:	a4 17       	cp	r26, r20
 edc:	10 f0       	brcs	.+4      	; 0xee2 <__utoa_common+0x14>
 ede:	a4 1b       	sub	r26, r20
 ee0:	83 95       	inc	r24
 ee2:	50 51       	subi	r21, 0x10	; 16
 ee4:	b9 f7       	brne	.-18     	; 0xed4 <__utoa_common+0x6>
 ee6:	a0 5d       	subi	r26, 0xD0	; 208
 ee8:	aa 33       	cpi	r26, 0x3A	; 58
 eea:	08 f0       	brcs	.+2      	; 0xeee <__utoa_common+0x20>
 eec:	a9 5d       	subi	r26, 0xD9	; 217
 eee:	a1 93       	st	Z+, r26
 ef0:	00 97       	sbiw	r24, 0x00	; 0
 ef2:	79 f7       	brne	.-34     	; 0xed2 <__utoa_common+0x4>
 ef4:	b1 11       	cpse	r27, r1
 ef6:	b1 93       	st	Z+, r27
 ef8:	11 92       	st	Z+, r1
 efa:	cb 01       	movw	r24, r22
 efc:	0c 94 80 07 	jmp	0xf00	; 0xf00 <strrev>

00000f00 <strrev>:
 f00:	dc 01       	movw	r26, r24
 f02:	fc 01       	movw	r30, r24
 f04:	67 2f       	mov	r22, r23
 f06:	71 91       	ld	r23, Z+
 f08:	77 23       	and	r23, r23
 f0a:	e1 f7       	brne	.-8      	; 0xf04 <strrev+0x4>
 f0c:	32 97       	sbiw	r30, 0x02	; 2
 f0e:	04 c0       	rjmp	.+8      	; 0xf18 <strrev+0x18>
 f10:	7c 91       	ld	r23, X
 f12:	6d 93       	st	X+, r22
 f14:	70 83       	st	Z, r23
 f16:	62 91       	ld	r22, -Z
 f18:	ae 17       	cp	r26, r30
 f1a:	bf 07       	cpc	r27, r31
 f1c:	c8 f3       	brcs	.-14     	; 0xf10 <strrev+0x10>
 f1e:	08 95       	ret

00000f20 <_exit>:
 f20:	f8 94       	cli

00000f22 <__stop_program>:
 f22:	ff cf       	rjmp	.-2      	; 0xf22 <__stop_program>
